<!-- ======================================================================
* Author : $Author$
* Version: $Revision: 161 $
* Date   : $Date: 2011-12-17 12:31:23 +0100 (Sat, 17 Dec 2011) $
* Url    : $URL$
======================================================================= -->

<!-- ======================================================================
* Copyright: (C) 2013 Gregor Cramer
======================================================================= -->

<!-- ======================================================================
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
======================================================================= -->

INDEX Pattern matching
TITLE Pattern matching

<p>
A pattern is a string which may contain the following special characters:
</p>

<div class="dir">
  <table>
    <tr valign="top">
      <td class="l"><expr>*</expr></td>
      <td class="r">
        Matches any sequence of characters in string,
        including a null string.
      </td>
    </tr>
    <tr valign="top">
      <td class="l"><expr>?</expr></td>
      <td class="r">
        Matches any single character in string.
      </td>
    </tr>
    <tr valign="top">
      <td class="l"><expr>!</expr></td>
      <td class="r">
        if the pattern is starting with this character then the pattern match
        will be case-sensitive. In this case the starting character is
        excluded from the match.
      </td>
    </tr>
    <tr valign="top">
      <td class="l"><expr>(</expr></td>
      <td class="r">
        This position within the pattern is matching the start of
        a word, either beginning with a letter or a digit.
      </td>
    </tr>
    <tr valign="top">
      <td class="l"><expr>)</expr></td>
      <td class="r">
        This position within the pattern is matching the end of
        a word, either ending with a letter or a digit.
      </td>
    </tr>
    <tr valign="top">
      <td class="l"><expr>{</expr></td>
      <td class="r">
        Like <expr>(</expr>, but switching off all special rules
        concerning blanks.
      </td>
    </tr>
    <tr valign="top">
      <td class="l"><expr>)</expr></td>
      <td class="r">
        Like <expr>)</expr>, but switching off all special rules
        concerning blanks.
      </td>
    </tr>
    <tr valign="top">
      <td class="l"><expr>\x</expr></td>
      <td class="r">
        Matches the single character x. This provides a way of avoiding
        the special interpretation of the characters <expr>(){}*!?\</expr>
        in pattern.
      </td>
    </tr>
  </table>
</div>

<p>
The characters <expr>! \? . , ; :</expr> are called delimiters.
</p>

<p>
Pattern matching is in general case-insensitive, except if the pattern is
starting with the special character <expr>!</expr>.
</p>

<p>
Also the blank character will be interpreted as a special character
(if not protected), it is matching any number of blank characters,
but not the empty string. But if a delimiter is adjacent to a blank
character, also an empty string will match. In this way mistakes in
spelling can be compensated.
</p>

<p>
Furthermore the following special rule applies: a parenthetical
expression &ndash; e.g. <expr>"(J*)"</expr> &ndash; will not
match any string which contains blanks or delimiters.
Furthermore the parentheses are maintaining the meaning of being
word delimiters.
</p>

<p>
Second special rule: a parenthetical expression with curly braces
&ndash; e.g. <expr>"{,}"</expr> &ndash; is switching off all
special rules concerning blanks.
</p>

<p>
Furthermore it is not allowed to mix the brace pairs
<expr>()</expr>, and <expr>{}</expr>, this means that
<expr>"(...}"</expr> is not a parenthetical expression.
</p>

<h2 id="examples">Examples</h2>

<verb>
Polgar, J*
</verb>

<p>
This pattern will match the following strings: <expr>"Polgar, J"</expr>,
and <expr>"Polgar, Judit"</expr>.
</p>

<verb>
A?erba?h
</verb>

<p>
This will match the following names:
<expr>"Averbakh"</expr> (English spelling), and <expr>"Awerbach"</expr> 
(German spelling).
</p>

<verb>
Kasparov*
</verb>

<p>
This will match, among others, the following strings:
<expr>"Kasparov"</expr>, <expr>"Kasparova"</expr>,
<expr>"Kasparov, Garry"</expr>, and <expr>"Kasparova, Tatiana"</expr>.
</p>

<verb>
Kasparov*)
</verb>

<p>
This will match the same strings as in the latter case, because all
these strings are ending with a letter. But a string like
<expr>"Kasparov, G."</expr> cannot match.
</p>

<verb>
(Kasparov*)
</verb>

<p>
This will match, among others, the strings <expr>"Kasparov"</expr>, and
<expr>"Kasparova"</expr>, but it cannot match <expr>"Kasparov, Garry"</expr>,
or <expr>"Kasparova, Tatiana"</expr>. A parenthetical expression is
excluding the match of blanks and separating characters.
</p>

<verb>
(Kasparov)*
</verb>

<p>
This will match, among others, the strings <expr>"Kasparov"</expr>, and
<expr>"Kasparov, Garry"</expr>, but it cannot match <expr>"Kasparova"</expr>,
or <expr>"Kasparova, Tatiana"</expr>.
</p>

<verb>
Kasparov*,*
</verb>

<p>
This will match, among others, the strings <expr>"Kasparov, Garry"</expr>, and
<expr>"Kasparova, Tatiana"</expr>, but it cannot match <expr>"Kasparov"</expr>,
or <expr>"Kasparova"</expr>.
</p>

<verb>
Kasparov, Garry
</verb>

</p>
This is matching the string <expr>"Kasparov, Garry"</expr>. Because of the
special rule with separating characters also the following strings will
match: <expr>"Kasparov,Garry"</expr> (lacking blank character), and
<expr>"Kasparov,&nbsp;&nbsp;Garry"</expr> (one blank too many).
</p>

<verb>
Kasparov{,} Garry
</verb>

<p>
This is matching <expr>"Kasparov, Garry"</expr>, but not <expr>"Kasparov,Garry"</expr>,
because an expression inside curly braces is switching off the special rules
concerning the blanks.

<verb>
Kasparov,\ Garry
</verb>

<verb>
{Kasparov, Garry}
</verb>

<p>
This is only matching the string <expr>"Kasparov,&nbsp;Garry"</expr> (exactly one
blank character), all special rules concerning blanks are switched off.
</p>

<verb>
\{Kasparov, Garry}
</verb>

<p>
Now the string <expr>"{Kasparov,&nbsp;Garry}" will match, because the curly brace is
protected and has no special meaning.
</p>

<verb>
!MacDonald
</verb>

<p>
This is matching <expr>"MacDonald"</expr>, but not <expr>"Macdonald"</expr>,
because the match is case-sensitive.
</p>

<verb>
\!!
</verb>

<p>
This will only match <epxr>"!!"</expr>. The first character has to be
protected, otherwise it will be recognized as a switch for case insensitive
search, and not as the character <expr>!</expr>.
</p>

<verb>
*\(Berlin\)
</verb>

<p>
This will match the string <expr>"Germany (Berlin)"</expr>, among others.
The characters <expr>(</expr>, and <expr>)</expr> do not have any special
meaning, because they are protected by a backslash. This means that the
string <expr>"Germany Berlin"</expr> cannot match.
</p>

END

<!-- vi:set ts=2 sw=2 et filetype=html: -->
