<!-- **********************************************************************
* Author : $Author$
* Version: $Revision: 161 $
* Date   : $Date: 2011-12-17 12:31:23 +0100 (Sat, 17 Dec 2011) $
* Url    : $URL$
*********************************************************************** -->

<!-- **********************************************************************
* Copyright: (C) 2013 Gregor Cramer
*********************************************************************** -->

<!-- **********************************************************************
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*********************************************************************** -->

INDEX Tagging (CQL)
INDEX CQL Tagging

TITLE Tagging

<p>
It is possible to track the identity of a particular piece. Each piece
in the initial position of the game is assigned a unique nonnegative
integer, called its mark. Promotion does not change the mark of a piece.
A tag is a named mark. We say that a tag is bound to the value of a mark.
A tag represents the particular piece whose mark equals the mark of the
tag. The following keywords manipulate the mark:
</p>

<h2>:forany in the match list</h2>

<p>
A tag is defined via the :forany keyword in a match list.
The :forany keyword takes two parameters: the alphanumeric
name of a tag and a piece designator.
</p>

<p>
The match filter is then conceptually run once in which each tag is bound
to each possible mark, such that two conditions hold:
</p>

<ul style="padding: 0;">
  <li class="space">
    No two tags may be bound to the same mark.
  </li>
  <li class="space">
    A tag may only be bound to a mark that represents a piece that either
    matches, or eventually matches, the piece designator associated with that
    tag. Square information associated with that piece designator is ignored. 
  </li>
</ul>

<p>
At most two tags may be contained inside a match list. Tags may not be used
in a matchlist if a <cql>position:relation</cql> occurs in a position list
inside that match list.
</p>

<h2>:tagmatch in the position list</h2>

<p>
A :tagmatch keyword in a position list takes two parameters, the
name of a tag and a piece designator. The position list match fails on the
current position if the piece and square corresponding to the mark of the tag
does not match the given piece designator. For example, assuming there is a
tag named "foo", this position will only match if "foo" is a white pawn:
</p>

<verb>
(position :tagmatch foo &P;)
</verb>

<h2>Piece designators and tags</h2>

<p>
A piece designator can have a piecetype designator that is the name of a tag
preceded by the character '$'. Such a piecetype represents the particular
piece represented by the named tag. Because tag names are alphanumeric, square
designators in such a piece designator must be enclosed in brackets. Example:

<verb>
(position $foo[a1,d4])
</verb>

<p>
The piece represented by the tag named "foo" must be on a1 or d4.
</p>

<h2>Longer examples</h2>

<p>
Consider the problem of recognizing all games in which the same rook visits all
four corners of the board:
</p>

<verbatim>
(match
  <cql>match:forany</cql> rook [&r;&R;] <comment>; loop over the possible rooks</comment>
  (position $rook[a1]) 
  (position $rook[h1])
  (position $rook[h8])
  (position $rook[a8]))
</verbatim>

<p>
Here, the <cql>position:forany</cql> keyword in the match list introduces a tag named
rook which is constrained to range over white or black rooks, or over pawns that
eventually promote to one of those.
</p>

<p>
The first position list matches games in which there is a position such that the
tag rook represents a rook on a1. The next position list matches games in which
there is a postiion such that the tag represents a rook on h1. The tag represents
the same mark, that is, the same piece, between the position lists. The
<cql>position:forany</cql> keyword will sequentially bind the tag to each allowed mark.
</p>

<p>
Since a match list matches a game only if all its constituent position filters
match it, the code does what we want here.
</p>

<p>
Second example, the excelsior theme: a pawn starts at the second rank and then
promotes.
</p>

<verbatim>
(match
  <cql>match:forany</cql> pawn [&P;&p;]
  (position
    <cql>position:initial</cql>
    <cql>position:tagmatch</cql> pawn &P;?2
    <cql>position:gappedsequence</cql> ((position <cql>position:movefrom</cql> $pawn <cql>position:promote</cql> U))
    <cql>position:flipcolor</cql>))
</verbatim>

<p>
<cql>position:tagmatch</cql> is matching pawns on second rank, and
the position sequence of <cql>position:gappedsequence</cql> is matching if
the tagged pawn is promoting in any subsequent game position.
</p>

<p>
Third example: the same piece delivers at least 30 checks in the game.
</p>

<verbatim>
(match
  <cql>match:forany</cql> checker A
  (position
    <cql>position:btm</cql>
    <cql>position:attackcount</cql> $checker &k; 1
    <cql>position:matchcount</cql> 30 1000
    <cql>position:flipcolor</cql>))
</verbatim>

END

<!-- vi:set ts=2 sw=2 et filetype=html: -->
