<!-- **********************************************************************
* Author : $Author$
* Version: $Revision: 161 $
* Date   : $Date: 2011-12-17 12:31:23 +0100 (Sat, 17 Dec 2011) $
* Url    : $URL$
*********************************************************************** -->

<!-- **********************************************************************
* Copyright: (C) 2013 Gregor Cramer
*********************************************************************** -->

<!-- **********************************************************************
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*********************************************************************** -->

INDEX CQL - Examples
TITLE CQL - Examples

<ul>
  <li><a href="#accumulator">Using accumulators to count passed pawns</a></li>
  <li><a href="#relation">Relation list example</a></li>
  <li><a href="#more">More examples</a></li>
</ul>

<h2 id="accumulator">Using accumulators to count passed pawns</h2>

<p>
We will show how to use <cql>position:accumulate</cql> and
<cql>position:sumrange</cql> to look for games that have at least 3 white
passed pawns in a position. First, we give a position filter that will
match any position with a white passed pawn:
</p>

<verbatim>
<comment>; match a position with a white passed pawn</comment>
(position
  Pd2
  <cql>position:piececount</cql> [pP][d3-7] 0
  <cql>position:piececount</cql> p[c3-7,e3-7] 0
  <cql>position:shift</cql>)
</verbatim>

<p>
Now, to find at least 3 white passed pawns, we add in some accumulation code:
</p>

<verbatim>
<comment>; match a position with at least three white passed pawns</comment>
(position
  Pd2
  <cql>position:piececount</cql> [pP][d3-7] 0
  <cql>position:piececount</cql> p[c3-7,e3-7] 0
  <cql>position:shift</cql>
  <cql>position:accumulate</cql> white_passer_counter
  <cql>position:sumrange</cql> white_passer_counter 3 8)
</verbatim>

<p>
Now suppose we want to find positions with at least two black passed pawns.
We can use:
</p>

<verbatim>
<comment>;match a position with at least two black passed pawns</comment>
(position
  pd7 
  <cql>position:piececount</cql> [pP][d2-6] 0
  <cql>position:piececount</cql> P[c2-6,e2-6] 0
  <cql>position:shift</cql>
  <cql>position:accumulate</cql> black_passer_counter
  <cql>position:sumrange</cql> black_passer_counter 2 8)
</verbatim>

<p>
Finally, to find positions with at least two black passers and at least three
white passers, we combine these lists:
</p>

<verbatim>
<comment>; match a position with at least three white</comment>
<comment>; and at least two black passers</comment>
(position
  <cql>position:sumrange</cql> white_passer_counter 3 8 
  <cql>position:sumrange</cql> black_passer_counter 2 8
  <cql>position:and</cql> (
    (position
      Pd2 
      <cql>position:piececount</cql> [pP][d3-7] 0
      <cql>position:piececount</cql> p[c3-7,e3-7] 0
      <cql>position:shift</cql>
      <cql>position:accumulate</cql> white_passer_counter)
    (position
      pd7 
      <cql>position:piececount</cql> [pP][d2-6] 0
      <cql>position:piececount</cql> P[c2-6,e2-6] 0
      <cql>position:shift</cql>
      <cql>position:accumulate</cql> black_passer_counter)))
</verbatim>

<h2 id="relation">Relation list example</h2>

<p>
The following position list searches for games in which the configuration
</p>

<dir><code>
Ke6 be7 be4 nd5
</code></dir>

<p>
occurs shifted or flipped, but in which no pieces from the original position
are on the same square as the pattern:
</p>

<verbatim>
(position
  Ke6 be7 be4 nd5
  <cql>position:shift</cql>
  <cql>position:flip</cql>
  <cql>position:relation</cql> (
    <cql>relation:pattern</cql>
    <cql>relation:shift</cql>
    <cql>relation:flip</cql>
    <cql>relation:originalsamecount</cql> 0
    <cql>relation:samesidetomove</cql>
    <cql>relation:variations</cql>))
</verbatim>

<p>
If one modified the <cql>relation:originalsamecount</cql> parameter to, say,
<expr>0 3</expr> from its current value of 1, then the pattern in the second
position would be allowed to overlap with at most three squares of the pattern
in the original position. 
</p>

<h2 id="more">More examples</h2>

<p>
3 white passed pawns and at least two black passed pawns in the same
position:
</p>

<verbatim>
(match
  (position 
    <cql>position:sumrange</cql> whitecount 3 8 
    <cql>position:sumrange</cql> blackcount 2 8
    <cql>position:and</cql> (
      (position
        Pd2 
        <cql>position:piececount</cql> [pP][d3-7] 0
        <cql>position:piececount</cql> p[c3-7,e3-7] 0
        <cql>position:shift</cql>
        <cql>position:accumulate</cql> whitecount)
      (position
        pd7 
        <cql>position:piececount</cql> [pP][d2-6] 0
        <cql>position:piececount</cql> P[c2-6,e2-6] 0
        <cql>position:shift</cql>
        <cql>position:accumulate</cql> blackcount))))
</verbatim>

<p>
Knight gives mate with its first move:
</p>

<verbatim>
(match
  <cql>match:forany</cql> knight N
  (position
    <cql>position:movefrom</cql> $knight
    <cql>position:matchcount</cql> 1)
  (position
    <cql>position:mate</cql>
    <cql>position:attackcount</cql> $knight k 1)) 
</verbatim>

END

<!-- vi:set ts=2 sw=2 et filetype=html: -->
