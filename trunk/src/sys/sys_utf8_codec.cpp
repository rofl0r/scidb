// ======================================================================
// Author : $Author$
// Version: $Revision: 25 $
// Date   : $Date: 2011-05-19 14:05:57 +0000 (Thu, 19 May 2011) $
// Url    : $URL$
// ======================================================================

// ======================================================================
// Copyright: (C) 2009-2011 Gregor Cramer
// ======================================================================

// ======================================================================
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
// ======================================================================

#include "sys_utf8_codec.h"

#include "m_string.h"
#include "m_utility.h"
#include "m_assert.h"

#include "u_base.h"

#include "tcl_base.h"

#include <tcl.h>
#include <ctype.h>

using namespace sys::utf8;
using namespace tcl;


static char const Latin1Map[128][2] =
#define ___ 0
	{
		{ '?', ___ }, { '?', ___ }, { '?', ___ }, { '?', ___ },	// 80 81 82 83
		{ '?', ___ }, { '?', ___ }, { '?', ___ }, { '?', ___ },	// 84 85 86 87
		{ '?', ___ }, { '?', ___ }, { '?', ___ }, { '?', ___ },	// 88 89 8a 8b
		{ '?', ___ }, { '?', ___ }, { '?', ___ }, { '?', ___ },	// 8c 8d 8e 8f
		{ '?', ___ }, { '?', ___ }, { '?', ___ }, { '?', ___ },	// 90 91 92 93
		{ '?', ___ }, { '?', ___ }, { '?', ___ }, { '?', ___ },	// 94 95 96 97
		{ '?', ___ }, { '?', ___ }, { '?', ___ }, { '?', ___ },	// 98 99 9a 9b
		{ '?', ___ }, { '?', ___ }, { '?', ___ }, { '?', ___ },	// 9c 9d 9e 9f
		{ '?', ___ }, { '?', ___ }, { 'c', ___ }, { '#', ___ },	// a0 a1 a2 a3
		{ '?', ___ }, { 'Y', ___ }, { '?', ___ }, { '?', ___ },	// a4 a5 a6 a7
		{ '?', ___ }, { 'C', ___ }, { '?', ___ }, { '?', ___ },	// a8 a9 aa ab
		{ '?', ___ }, { '?', ___ }, { 'R', ___ }, { '-', ___ },	// ac ad ae af
		{ '-', ___ }, { '-', ___ }, { '-', ___ }, { '?', ___ },	// b0 b1 b2 b3
		{ '?', ___ }, { '?', ___ }, { '?', ___ }, { '?', ___ },	// b4 b5 b6 b7
		{ '?', ___ }, { '?', ___ }, { '?', ___ }, { '?', ___ },	// b8 b9 ba bb
		{ '?', ___ }, { '?', ___ }, { '?', ___ }, { '?', ___ },	// bc bd be bf
		{ 'A', ___ }, { 'A', ___ }, { 'A', ___ }, { 'A', ___ },	// c0 c1 c2 c3
		{ 'A', ___ }, { 'A', ___ }, { 'A', ___ }, { 'C', ___ },	// c4 c5 c6 c7
		{ 'E', ___ }, { 'E', ___ }, { 'E', ___ }, { 'E', ___ },	// c8 c9 ca cb
		{ 'I', ___ }, { 'I', ___ }, { 'I', ___ }, { 'I', ___ },	// cc cd ce cf
		{ 'D', ___ }, { 'N', ___ }, { 'O', ___ }, { 'O', ___ },	// d0 d1 d2 d3
		{ 'O', ___ }, { 'O', ___ }, { 'O', ___ }, { 'x', ___ },	// d4 d5 d6 d7
		{ 'O', ___ }, { 'U', ___ }, { 'U', ___ }, { 'U', ___ },	// d8 d9 da db
		{ 'U', ___ }, { 'Y', ___ }, { '?', ___ }, { 's', 's' },	// dc dd de df
		{ 'a', ___ }, { 'a', ___ }, { 'a', ___ }, { 'a', ___ },	// e0 e1 e2 e3
		{ 'a', ___ }, { 'a', ___ }, { 'a', ___ }, { 'c', ___ },	// e4 e5 e6 e7
		{ 'e', ___ }, { 'e', ___ }, { 'e', ___ }, { 'e', ___ },	// e8 e9 ea ab
		{ 'i', ___ }, { 'i', ___ }, { 'i', ___ }, { 'i', ___ },	// ec ed ee ef
		{ 'd', ___ }, { 'n', ___ }, { 'o', ___ }, { 'o', ___ },	// f0 f1 f2 f3
		{ 'o', ___ }, { 'o', ___ }, { 'o', ___ }, { '/', ___ },	// f4 f5 f6 f7
		{ 'o', ___ }, { 'u', ___ }, { 'u', ___ }, { 'u', ___ },	// f8 f9 fa fb
		{ 'u', ___ }, { 'y', ___ }, { '?', ___ }, { 'y', ___ },	// fc fd fe ff
#undef ___
};

static char const GermanMap[128][2] =
#define ___ 0
#define _e_ 0
	{
		{ '?', ___ }, { '?', ___ }, { '?', ___ }, { '?', ___ },	// 80 81 82 83
		{ '?', ___ }, { '?', ___ }, { '?', ___ }, { '?', ___ },	// 84 85 86 87
		{ '?', ___ }, { '?', ___ }, { '?', ___ }, { '?', ___ },	// 88 89 8a 8b
		{ '?', ___ }, { '?', ___ }, { '?', ___ }, { '?', ___ },	// 8c 8d 8e 8f
		{ '?', ___ }, { '?', ___ }, { '?', ___ }, { '?', ___ },	// 90 91 92 93
		{ '?', ___ }, { '?', ___ }, { '?', ___ }, { '?', ___ },	// 94 95 96 97
		{ '?', ___ }, { '?', ___ }, { '?', ___ }, { '?', ___ },	// 98 99 9a 9b
		{ '?', ___ }, { '?', ___ }, { '?', ___ }, { '?', ___ },	// 9c 9d 9e 9f
		{ '?', ___ }, { '?', ___ }, { 'c', ___ }, { '#', ___ },	// a0 a1 a2 a3
		{ '?', ___ }, { 'Y', ___ }, { '?', ___ }, { '?', ___ },	// a4 a5 a6 a7
		{ '?', ___ }, { 'C', ___ }, { '?', ___ }, { '?', ___ },	// a8 a9 aa ab
		{ '?', ___ }, { '?', ___ }, { 'R', ___ }, { '-', ___ },	// ac ad ae af
		{ '-', ___ }, { '-', ___ }, { '-', ___ }, { '?', ___ },	// b0 b1 b2 b3
		{ '?', ___ }, { '?', ___ }, { '?', ___ }, { '?', ___ },	// b4 b5 b6 b7
		{ '?', ___ }, { '?', ___ }, { '?', ___ }, { '?', ___ },	// b8 b9 ba bb
		{ '?', ___ }, { '?', ___ }, { '?', ___ }, { '?', ___ },	// bc bd be bf
		{ 'A', ___ }, { 'A', ___ }, { 'A', ___ }, { 'A', ___ },	// c0 c1 c2 c3
		{ 'A', 'e' }, { 'A', ___ }, { 'A', _e_ }, { 'C', ___ },	// c4 c5 c6 c7
		{ 'E', ___ }, { 'E', ___ }, { 'E', ___ }, { 'E', ___ },	// c8 c9 ca cb
		{ 'I', ___ }, { 'I', ___ }, { 'I', ___ }, { 'I', ___ },	// cc cd ce cf
		{ 'D', ___ }, { 'N', ___ }, { 'O', ___ }, { 'O', ___ },	// d0 d1 d2 d3
		{ 'O', ___ }, { 'O', ___ }, { 'O', ___ }, { 'x', ___ },	// d4 d5 d6 d7
		{ 'O', 'e' }, { 'U', ___ }, { 'U', ___ }, { 'U', ___ },	// d8 d9 da db
		{ 'U', 'e' }, { 'Y', ___ }, { '?', ___ }, { 's', 's' },	// dc dd de df
		{ 'a', ___ }, { 'a', ___ }, { 'a', ___ }, { 'a', ___ },	// e0 e1 e2 e3
		{ 'a', 'e' }, { 'a', ___ }, { 'a', _e_ }, { 'c', ___ },	// e4 e5 e6 e7
		{ 'e', ___ }, { 'e', ___ }, { 'e', ___ }, { 'e', ___ },	// e8 e9 ea ab
		{ 'i', ___ }, { 'i', ___ }, { 'i', ___ }, { 'i', ___ },	// ec ed ee ef
		{ 'd', ___ }, { 'n', ___ }, { 'o', ___ }, { 'o', ___ },	// f0 f1 f2 f3
		{ 'o', ___ }, { 'o', ___ }, { 'o', 'e' }, { '/', ___ },	// f4 f5 f6 f7
		{ 'o', _e_ }, { 'u', ___ }, { 'u', ___ }, { 'u', ___ },	// f8 f9 fa fb
		{ 'u', 'e' }, { 'y', ___ }, { '?', ___ }, { 'y', ___ },	// fc fd fe ff
#undef _e_
#undef ___
};

static char const* const NonDiacriticsTables[28][256] =
{
#define ___ 0
	// Table 0
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 " ",  "!", "\"",  "#",  "$",  "%",  "&",  "'",  "(",  ")",  "*",  "+",  ",",  "-",  ".",  "/",
		 "0",  "1",  "2",  "3",  "4",  "5",  "6",  "7",  "8",  "9",  ":",  ";",  "<",  "=",  ">",  "?",
		 "@",  "A",  "B",  "C",  "D",  "E",  "F",  "G",  "H",  "I",  "J",  "K",  "L",  "M",  "N",  "O",
		 "P",  "Q",  "R",  "S",  "T",  "U",  "V",  "W",  "X",  "Y",  "Z",  "[", "\\",  "]",  "^",  "_",
		 "`",  "a",  "b",  "c",  "d",  "e",  "f",  "g",  "h",  "i",  "j",  "k",  "l",  "m",  "n",  "o",
		 "p",  "q",  "r",  "s",  "t",  "u",  "v",  "w",  "x",  "y",  "z",  "{",  "|",  "}",  "~",  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "a",  ___,  ___,  ___,  ___,  ___,
		 "°",  ___,  ___,  ___,  ___,  ___,  ___,  "-",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "A",  "A",  "A",  "A",  "A",  "A", "Ae",  "C",  "E",  "E",  "E",  "E",  "I",  "I",  "I",  "I",
		"Dh",  "N",  "O",  "O",  "O",  "O",  "O",  ___,  "O",  "U",  "U",  "U",  "U",  "Y", "Th", "ss",
		 "a",  "a",  "a",  "a",  "a",  "a", "ae",  "c",  "e",  "e",  "e",  "e",  "i",  "i",  "i",  "i",
		"dh",  "n",  "o",  "o",  "o",  "o",  "o",  ___,  "o",  "u",  "u",  "u",  "u",  "y", "th",  "y",
	},
	// Table 1
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 " ",  "!", "\"",  "#",  "$",  "%",  "&",  "'",  "(",  ")",  "*",  "+",  ",",  "-",  ".",  "/",
		 "0",  "1",  "2",  "3",  "4",  "5",  "6",  "7",  "8",  "9",  ":",  ";",  "<",  "=",  ">",  "?",
		 "@",  "A",  "B",  "C",  "D",  "E",  "F",  "G",  "H",  "I",  "J",  "K",  "L",  "M",  "N",  "O",
		 "P",  "Q",  "R",  "S",  "T",  "U",  "V",  "W",  "X",  "Y",  "Z",  "[", "\\",  "]",  "^",  "_",
		 "`",  "a",  "b",  "c",  "d",  "e",  "f",  "g",  "h",  "i",  "j",  "k",  "l",  "m",  "n",  "o",
		 "p",  "q",  "r",  "s",  "t",  "u",  "v",  "w",  "x",  "y",  "z",  "{",  "|",  "}",  "~",  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "°",  ___,  ___,  ___,  ___,  ___,  ___,  "-",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  "A",  "A",  "A",  "A",  ___,  ___,  "C",  "E",  "E",  ___,  "E",  ___,  "I",  "I",  "I",
		 "D",  ___,  ___,  "O",  "O",  "O",  "O",  ___,  ___,  ___,  "U",  "U",  "U",  "Y",  ___, "ss",
		 ___,  "a",  "a",  "a",  "a",  ___,  ___,  "c",  "e",  "e",  ___,  "e",  ___,  "i",  "i",  "i",
		 ___,  ___,  ___,  "o",  "o",  "o",  "o",  ___,  ___,  ___,  "u",  "u",  "u",  "y",  ___,  ___,
	},
	// Table 2
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 " ",  "!", "\"",  "#",  "$",  "%",  "&",  "'",  "(",  ")",  "*",  "+",  ",",  "-",  ".",  "/",
		 "0",  "1",  "2",  "3",  "4",  "5",  "6",  "7",  "8",  "9",  ":",  ";",  "<",  "=",  ">",  "?",
		 "@",  "A",  "B",  "C",  "D",  "E",  "F",  "G",  "H",  "I",  "J",  "K",  "L",  "M",  "N",  "O",
		 "P",  "Q",  "R",  "S",  "T",  "U",  "V",  "W",  "X",  "Y",  "Z",  "[", "\\",  "]",  "^",  "_",
		 "`",  "a",  "b",  "c",  "d",  "e",  "f",  "g",  "h",  "i",  "j",  "k",  "l",  "m",  "n",  "o",
		 "p",  "q",  "r",  "s",  "t",  "u",  "v",  "w",  "x",  "y",  "z",  "{",  "|",  "}",  "~",  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "°",  ___,  ___,  ___,  ___,  ___,  ___,  "-",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "A",  "A",  "A",  "A",  "A",  ___,  ___,  "C",  "E",  "E",  "E",  "E",  ___,  "I",  "I",  "I",
		 ___,  "N",  "O",  "O",  "O",  "O",  "O",  ___,  ___,  "U",  "U",  "U",  "U",  ___,  ___, "ss",
		 "a",  "a",  "a",  "a",  "a",  ___,  ___,  "c",  "e",  "e",  "e",  "e",  ___,  "i",  "i",  "i",
		 ___,  "n",  "o",  "o",  "o",  "o",  "o",  ___,  ___,  "u",  "u",  "u",  "u",  ___,  ___,  ___,
	},
	// Table 3
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 " ",  "!", "\"",  "#",  "$",  "%",  "&",  "'",  "(",  ")",  "*",  "+",  ",",  "-",  ".",  "/",
		 "0",  "1",  "2",  "3",  "4",  "5",  "6",  "7",  "8",  "9",  ":",  ";",  "<",  "=",  ">",  "?",
		 "@",  "A",  "B",  "C",  "D",  "E",  "F",  "G",  "H",  "I",  "J",  "K",  "L",  "M",  "N",  "O",
		 "P",  "Q",  "R",  "S",  "T",  "U",  "V",  "W",  "X",  "Y",  "Z",  "[", "\\",  "]",  "^",  "_",
		 "`",  "a",  "b",  "c",  "d",  "e",  "f",  "g",  "h",  "i",  "j",  "k",  "l",  "m",  "n",  "o",
		 "p",  "q",  "r",  "s",  "t",  "u",  "v",  "w",  "x",  "y",  "z",  "{",  "|",  "}",  "~",  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "°",  ___,  ___,  ___,  ___,  ___,  ___,  "-",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  "A",  "A",  ___,  "A",  ___,  ___,  "C",  ___,  ___,  "E",  "E",  ___,  ___,  "I",  "I",
		 ___,  ___,  ___,  ___,  "O",  ___,  "O",  ___,  ___,  ___,  ___,  "U",  "U",  "Y",  ___, "ss",
		 ___,  "a",  "a",  ___,  "a",  ___,  ___,  "c",  ___,  ___,  "e",  "e",  ___,  ___,  "i",  "i",
		 ___,  ___,  ___,  ___,  "o",  ___,  "o",  ___,  ___,  ___,  ___,  "u",  "u",  "y",  ___,  ___,
	},
	// Table 4
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 " ",  "!", "\"",  "#",  "$",  "%",  "&",  "'",  "(",  ")",  "*",  "+",  ",",  "-",  ".",  "/",
		 "0",  "1",  "2",  "3",  "4",  "5",  "6",  "7",  "8",  "9",  ":",  ";",  "<",  "=",  ">",  "?",
		 "@",  "A",  "B",  "C",  "D",  "E",  "F",  "G",  "H",  "I",  "J",  "K",  "L",  "M",  "N",  "O",
		 "P",  "Q",  "R",  "S",  "T",  "U",  "V",  "W",  "X",  "Y",  "Z",  "[", "\\",  "]",  "^",  "_",
		 "`",  "a",  "b",  "c",  "d",  "e",  "f",  "g",  "h",  "i",  "j",  "k",  "l",  "m",  "n",  "o",
		 "p",  "q",  "r",  "s",  "t",  "u",  "v",  "w",  "x",  "y",  "z",  "{",  "|",  "}",  "~",  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "°",  ___,  ___,  ___,  ___,  ___,  ___,  "-",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "A",  "A",  "A",  "A",  "A",  ___,  ___,  "C",  "E",  "E",  "E",  "E",  ___,  "I",  "I",  "I",
		 ___,  "N",  "O",  "O",  "O",  "O",  "O",  ___,  ___,  "U",  "U",  "U",  "U",  ___,  ___, "ss",
		 "a",  "a",  "a",  "a",  "a",  ___,  ___,  "c",  "e",  "e",  "e",  "e",  ___,  "i",  "i",  "i",
		 ___,  "n",  "o",  "o",  "o",  "o",  "o",  ___,  ___,  "u",  "u",  "u",  "u",  ___,  ___,  ___,
	},
	// Table 5
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 " ",  "O", "\"",  "u",  "U",  "%",  "o",  "'",  "(",  ")",  "*",  "O",  ",",  "-",  ".",  "/",
		 "0",  "1",  "2",  "3",  "4",  "5",  "6",  "7",  "8",  "9",  ":",  ";",  "O",  "U",  "u",  "o",
		 "@",  "A",  "B",  "C",  "D",  "E",  "F",  "G",  "H",  "I",  "J",  "K",  "L",  "M",  "N",  "O",
		 "P",  "Q",  "R",  "S",  "T",  "U",  "V",  "W",  "X",  "Y",  "Z",  "[",  "o",  "]",  "U",  "_",
		 "o",  "a",  "b",  "c",  "d",  "e",  "f",  "g",  "h",  "i",  "j",  "k",  "l",  "m",  "n",  "o",
		 "p",  "q",  "r",  "s",  "t",  "u",  "v",  "w",  "x",  "y",  "z",  "o",  "U",  "u",  "u",  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "°",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "A",  "A",  "A",  "A",  ___,  ___,  ___,  "C",  "E",  "E",  "E",  ___,  "I",  "I",  "I",  ___,
		 "D",  ___,  "O",  "O",  "O",  "O",  ___,  ___,  ___,  "U",  "U",  "U",  ___,  "Y",  ___,  ___,
		 "a",  "a",  "a",  "a",  ___,  ___,  ___,  "c",  "e",  "e",  "e",  "e",  "i",  "i",  "i",  "i",
		 ___,  ___,  "o",  "o",  "o",  "o",  ___,  ___,  ___,  "u",  "u",  "u",  ___,  "y",  ___,  ___,
	},
	// Table 6
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "A",  "a",  "A",  "a",  "A",  "a",  "A",  "a",  "A",  "a",  "A",  "a",  "A",  "a",  "A",  "a",
		 "A",  "a",  "A",  "a",  "A",  "a",  "A",  "a",  "E",  "e",  "E",  "e",  "E",  "e",  "E",  "e",
		 "E",  "e",  "E",  "e",  "E",  "e",  "E",  "e",  "I",  "i",  "I",  "i",  "O",  "o",  "O",  "o",
		 "O",  "o",  "O",  "o",  "O",  "o",  "O",  "o",  "O",  "o",  "O",  "o",  "O",  "o",  "O",  "o",
		 "O",  "o",  "@",  "o",  "U",  "u",  "U",  "u",  "U",  "u",  "U",  "u",  "U",  "u",  "U",  "u",
		 "U",  "u",  "Y",  "y",  "Y",  "y",  "Y",  "y",  "Y",  "y",  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 7
	{
		 ___,  ___,  "A",  "a",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  "d",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "I",  "i",  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___, "Oe", "oe",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "U",  "u",  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "O",  "o",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "U",
		 "u",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 8
	{
		 "A",  "a",  "A",  "a",  "A",  "a",  "C",  "c",  ___,  ___,  ___,  ___,  "C",  "c",  "D", "d'",
		 "D",  "d",  "E",  "e",  ___,  ___,  "E",  "e",  "E",  "e",  "E",  "e",  ___,  ___,  ___,  ___,
		 ___,  ___,  "G",  "g",  ___,  ___,  ___,  ___,  ___,  ___,  "I",  "i",  ___,  ___,  "I",  "i",
		 ___,  ___,  ___,  ___,  ___,  ___,  "K",  "k",  ___,  "L",  "l",  "L",  "l", "L'", "l'",  ___,
		 ___,  "L",  "l",  "N",  "n",  "N",  "n",  "N",  "n",  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "O",  "o",  ___,  ___,  "R",  "r",  ___,  ___,  "R",  "r",  "S",  "s",  ___,  ___,  "S",  "s",
		 "S",  "s",  "T",  "t",  "T", "t'",  ___,  ___,  ___,  ___,  "U",  "u",  "U",  "u",  "U",  "u",
		 "U",  "u",  "U",  "u",  ___,  ___,  ___,  ___,  ___,  "Z",  "z",  "Z",  "z",  "Z",  "z",  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 9
	{
		 "A",  "a",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "C",  "c",  ___,  ___,  ___,  ___,
		 ___,  ___,  "E",  "e",  ___,  ___,  ___,  ___,  "E",  "e",  ___,  ___,  ___,  ___,  "G",  "g",
		 "G",  "g",  ___,  ___,  ___,  ___,  "H",  "h",  ___,  ___,  "I",  "i",  ___,  ___,  ___,  ___,
		 "I",  "i",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  "L",  "l",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "O",  "o",  ___,  ___,
		 ___,  ___, "Oe", "oe",  ___,  ___,  ___,  ___,  ___,  ___,  "S",  "s",  ___,  ___,  "S",  "s",
		 "S",  "s",  "T",  "t",  ___,  ___,  ___,  ___,  ___,  ___,  "U",  "u",  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  "W",  "w",  ___,  ___,  ___,  ___,  ___,  "Z",  "z",  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  "G",  "g",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 10
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "D",  "d",  "D",  "d",
		 "D",  "d",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  "H",  "h",  ___,  ___,  "H",  "h",  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "N",  "n",  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "R",  "r",
		 ___,  ___,  "S",  "s",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "T",  "t",  "T",  "t",
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  "Z",  "z",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 11
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "C",  "c",  ___,  ___,
		 ___, "dh",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "N",  "n",  ___,  ___,  ___,  ___,
		 "O",  "o", "Oe", "oe",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "S",  "s",  ___,  ___,  ___,  ___,  "T",  "t",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "U",  "u",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "Z",  "z",  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 12
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "D",  "d",  "D",  "d",
		 "D",  "d",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  "H",  "h",  ___,  ___,  "H",  "h",  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  "P",  "p",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  "S",  "s",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "T",  "t",  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  "Z",  "z",  "h",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 13
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "D",  "d",  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  "H",  "h",  ___,  ___,  "H",  "h",  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "M",  "m",  "M",  "m",  "N",  "n",  "N",  "n",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "R",  "r",  ___,  ___,  ___,  ___,
		 ___,  ___,  "S",  "s",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "T",  "t",  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "Y",  "y",
		 ___,  ___,  ___,  ___,  "Z",  "z",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 14
	{
		 "A",  "a",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "C",  "c",  ___,  ___,
		 ___,  ___,  "E",  "e",  ___,  ___,  "E",  "e",  ___,  ___,  ___,  ___,  ___,  ___,  "G",  "g",
		 "G",  "g",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "I",  "i",  "I",  "i",  ___,  ___,
		 "I",  "i",  ___,  ___,  ___,  ___,  "K",  "k",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "O",  "o",  "O",  "o",
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "S",  "s",
		 "S",  "s",  "T",  "t",  ___,  ___,  ___,  ___,  ___,  ___,  "U",  "u",  "U",  "u",  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "A",
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "a",  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 15
	{
		 "A",  "a",  "A",  "a",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "C",  "c",  ___,  ___,
		 ___,  ___,  "E",  "e",  "E",  "e",  "E",  "e",  ___,  ___,  "E",  "e",  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "I",  "i",  "I",  "i",  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  "N",  "n",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "O",  "o",  "O",  "o",
		 ___,  ___, "Oe", "oe",  ___,  ___,  ___,  ___,  ___,  ___,  "S",  "s",  ___,  ___,  "S",  "s",
		 "S",  "s",  "T",  "t",  ___,  ___,  ___,  ___,  ___,  ___,  "U",  "u",  "U",  "u",  ___,  ___,
		 ___,  ___,  ___,  ___,  "W",  "w",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "A",  "a",  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 16
	{
		 ___,  ___,  ___,  ___,   "",  ___,  ___,  ___,   "",  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,   "",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,   "",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 17
	{
		 ___,  ___,  ___,  ___,   "",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,   "",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,   "",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 18
	{
		 ___,  ___,  ___,  ___,   "",  ___,   "",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,   "",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 19
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "I",  "i",
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 20
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "`",  "'",  ___,  "`",  ___, "\"",  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 21
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "`",  "'",  ___,  "`",  ___, "\"",  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 22
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "`",  "'",  ___,  ___,  ___, "\"",  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 23
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___, "\"",  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 24
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "`",  "'",  ___,  "`",  ___, "\"",  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 25
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "a",  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "'",  "`",
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 26
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  "i",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 27
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "S",  "s",  "T",  "t",  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
#undef ___
};

static char const* const* NonDiacriticsLookup[6][33] =
{
	// Region 1
	{
		NonDiacriticsTables[0],							//  0
		NonDiacriticsTables[11],						//  1
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,	//  2 - 15
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,	// 16 - 29
		0, 0,													// 30 - 31
		NonDiacriticsTables[22],						// 32
	},
	// Region 2
	{
		NonDiacriticsTables[1],							//  0
		NonDiacriticsTables[8],							//  1
		NonDiacriticsTables[27],						//  2
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//  3 - 15
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,	// 15 - 29
		NonDiacriticsTables[19],						// 30
		0,														// 31
		NonDiacriticsTables[23],						// 32
	},
	// Region 3
	{
		NonDiacriticsTables[2],							//  0
		NonDiacriticsTables[9],							//  1
		NonDiacriticsTables[25],						//  2
		NonDiacriticsTables[16],						//  3
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,	0, 0,	//  4 - 17
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,			// 18 - 29
		NonDiacriticsTables[12],						// 30
		0,														// 31
		NonDiacriticsTables[20],						// 32
	},
	// Region 4
	{
		NonDiacriticsTables[3],							//  0
		NonDiacriticsTables[14],						//  1
		NonDiacriticsTables[25],						//  2
		NonDiacriticsTables[17],						//  3
		NonDiacriticsTables[26],						//  4
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,	//  5 - 18
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,				// 19 - 29
		NonDiacriticsTables[10],						// 30
		0,														// 31
		NonDiacriticsTables[21],						// 32
	},
	// Region 5
	{
		NonDiacriticsTables[4],							//  0
		NonDiacriticsTables[15],						//  1
		0,														//  2
		NonDiacriticsTables[18],						//  3
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,	//  4 - 17
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,			// 18 - 29
		NonDiacriticsTables[13],						// 30
		0,														// 31
		NonDiacriticsTables[24],						// 32
	},
	// Region 6
	{
		NonDiacriticsTables[5],							//  0
		NonDiacriticsTables[7],							//  1
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,	//  2 - 15
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,	// 16 - 29
		NonDiacriticsTables[6],							// 30
		0, 0,													// 31 - 32
	},
};


static bool
fitsRegion1(mstl::string const& s)
{
	//^(	[\x20-\x7e]|
	//		\xc2\xaa|
	//		\xc2\xb0|
	//		\xc2\xb7|
	//		\xc3[\x80-\x96]|
	//		\xc3[\x98-\xb6]|
	//		\xc3[\xb8-\xbf]|
	//		\xc4[\x8c-\x8d]|
	//		\xc4\x91|
	//		\xc5[\x8a-\x8b]|
	//		\xc5[\x90-\x93]|
	//		\xc5[\xa0-\xa1]|
	//		\xc5[\xa6-\xa7]|
	//		\xc5[\xb0-\xb1]|
	//		\xc5[\xbd-\xbe]|
	//		\xe2\x80[\x98-\x99]|
	//		\xe2\x80[\x9d
	//)*$/
	for (unsigned i = 0; i < s.size(); )
	{
		unsigned char c = s[i++];

		if (c < 0x20)
			return false;

		if (0x7e < c)
		{
			switch (c)
			{
				case 0xc2:
					switch (uint8_t(s[i++]))
					{
						case 0xaa:
						case 0xb0:
						case 0xb7: break;

						default: return false;
					}
					break;

				case 0xc3:
					c = s[i++];
					if (c < 0x80 || 0xbf < c)
						return false;
					if (c == 0x97 || c == 0xb7)
						return false;
					break;

				case 0xc4:
					c = s[i++];
					if (c != 0x8c && c != 0x8d && c != 0x91)
						return false;
					break;

				case 0xc5:
					switch (uint8_t(s[i++]))
					{
						case 0x8a ... 0x8b:
						case 0x90 ... 0x93:
						case 0xa0 ... 0xa1:
						case 0xa6 ... 0xa7:
						case 0xb0 ... 0xb1:
						case 0xbd ... 0xbe: break;

						default: return false;
					}
					break;

				case 0xe2:
					if (uint8_t(s[i++]) != 0x80)
						return false;
					switch (uint8_t(s[i++]))
					{
						case 0x98:
						case 0x99:
						case 0x9d: break;

						default: return false;
					}
					break;

				default:
					return false;
			}
		}
	}

	return true;
}


static bool
fitsRegion2(mstl::string const& s)
{
	//^(	[\x20-\x7e]|
	//		\xc2\xb0|
	//		\xc2\xb7|
	//		\xc3[\x81-\x84]|
	//		\xc3[\x87-\x89]|
	//		\xc3\x8b|
	//		\xc3[\x8d-\x90]|
	//		\xc3[\x93-\x96]|
	//		\xc3[\x9a-\x9d]|
	//		\xc3\x9f|
	//		\xc3[\xa1-\xa3]|
	//		\xc3\xa4|
	//		\xc3[\xa7-\xa9]|
	//		\xc3\xab|
	//		\xc3[\xad-\xaf]|
	//		\xc3[\xb3-\xb6]|
	//		\xc3[\xba-\xbd]|
	//		\xc4[\x80-\x87]|
	//		\xc4[\x8c-\x93]|
	//		\xc4[\x96-\x9b]|
	//		\xc4[\xa2-\xa3]|
	//		\xc4[\xaa-\xab]|
	//		\xc4[\xae-\xaf]|
	//		\xc4[\xb6-\xb7]|
	//		\xc4[\xb9-\xbe]|
	//		\xc5[\x81-\x88]|
	//		\xc5[\x90-\x91]|
	//		\xc5[\x94-\x95]|
	//		\xc5[\x98-\x9b]|
	//		\xc5[\x9e-\xa5]|
	//		\xc5[\xaa-\xb3]|
	//		\xc5[\xb9-\xbe]|
	//		\xc8[\x98-\x9b]|
	//		\xe1\xb8[\xae-\xaf]|
	//		\xe2\x80[\x98-\x99]|
	//		\xe2\x80\x9d
	//)*$/

//	char const* p = s.c_str();
//	while (p < s.end())
//	{
//		Tcl_UniChar ch;
//
//		if (static_cast<unsigned char>(*p) >= 0xc0)
//		{
//			p += Tcl_UtfToUniChar(p, &ch);
//			printf("%u ", ch);
//		}
//		else
//		{
//			printf("%u ", unsigned(*p++));
//		}
//	}
//	printf("\n");
	for (unsigned i = 0; i < s.size(); )
	{
		unsigned char c = s[i++];

		if (c < 0x20)
			return false;

		if (0x7e < c)
		{
			switch (c)
			{
				case 0xc2:
					switch (uint8_t(s[i++]))
					{
						case 0xb0:
						case 0xb7: break;

						default: return false;
					}
					break;

				case 0xc3:
					switch (uint8_t(s[i++]))
					{
						case 0x81 ... 0x84:
						case 0x87 ... 0x89:
						case 0x8b:
						case 0x8d ... 0x90:
						case 0x93 ... 0x96:
						case 0x9a ... 0x9d:
						case 0x9f:
						case 0xa1 ... 0xa3:
						case 0xa4:
						case 0xa7 ... 0xa9:
						case 0xab:
						case 0xad ... 0xaf:
						case 0xb3 ... 0xb6:
						case 0xba ... 0xbd: break;

						default: return false;
					}
					break;

				case 0xc4:
					switch (uint8_t(s[i++]))
					{
						case 0x80 ... 0x87:
						case 0x8c ... 0x93:
						case 0x96 ... 0x9b:
						case 0xa2 ... 0xa3:
						case 0xaa ... 0xab:
						case 0xae ... 0xaf:
						case 0xb6 ... 0xb7:
						case 0xb9 ... 0xbe: break;

						default: return false;
					}
					break;

				case 0xc5:
					switch (uint8_t(s[i++]))
					{
						case 0x81 ... 0x88:
						case 0x90 ... 0x91:
						case 0x94 ... 0x95:
						case 0x98 ... 0x9b:
						case 0x9e ... 0xa5:
						case 0xaa ... 0xb3:
						case 0xb9 ... 0xbe: break;

						default: return false;
					}
					break;

				case 0xc8:
					c = s[i++];
					if (c < 0x98 || 0x9b < c)
						return false;
					break;

				case 0xe1:
					if (uint8_t(s[i++]) != 0xb8)
						return false;
					c = s[i++];
					if (c != 0xae && c != 0xaf)
						return false;
					break;

				case 0xe2:
					if (uint8_t(s[i++]) != 0x80)
						return false;
					switch (uint8_t(s[i++]))
					{
						case 0x98:
						case 0x99:
						case 0x9d: break;

						default: return false;
					}
					break;

				default:
					return false;
			}
		}
	}

	return true;
}


static bool
fitsRegion3(mstl::string const& s)
{
	//^(	[\x20-\x7e]|
	//		\xc2\xb0|
	//		\xc2\xb7|
	//		\xc3[\x80-\x84]|
	//		\xc3[\x87-\x8b]|
	//		\xc3[\x8d-\x8f]|
	//		\xc3[\x91-\x96]|
	//		\xc3[\x99-\x9c]|
	//		\xc3[\x9f-\xa4]|
	//		\xc3[\xa7-\xab]|
	//		\xc3[\xad-\xaf]|
	//		\xc3[\xb1-\xb6]|
	//		\xc3[\xb9-\xbc]|
	//		\xc4[\x80-\x81]|
	//		\xc4[\x8a-\x8b]|
	//		\xc4[\x92-\x93]|
	//		\xc4[\x98-\x99]|
	//		\xc4[\x9e-\xa1]|
	//		\xc4[\xa6-\xa7]|
	//		\xc4[\xaa-\xab]|
	//		\xc4[\xb0-\xb1]|
	//		\xc5[\x81-\x82]|
	//		\xc5[\x8d-\x8e]|
	//		\xc5[\x92-\x93]|
	//		\xc5[\x9a-\x9b]|
	//		\xc5[\x9e-\x9f]|
	//		\xc5[\xa0-\xa3]|
	//		\xc5[\xaa-\xab]|
	//		\xc5[\xb4-\xb5]|
	//		\xc5[\xbb-\xbc]|
	//		\xc7[\xa5-\xa6]|
	//		\xc9\x99|
	//		\xca[\xbe-\xbf]|
	//		\xcc\x84|
	//		\xcc\x88|
	//		\xcc\xa7|
	//		\xcc\xb1|
	//		\xe1\xb8[\x8c-\x91]|
	//		\xe1\xb8[\xa4-\xa5]|
	//		\xe1\xb8[\xa8-\xa9]|
	//		\xe1\xb9[\x96-\x97]||
	//		\xe1\xb9[\xa2-\xa3]|
	//		\xe1\xb9[\xac-\xad]|
	//		\xe1\xba[\x94-\x96]|
	//		\xe2\x80[\x98-\x99]|
	//		\xe2\x80\x9b|
	//		\xe2\x80\x9d
	//)*$/
	for (unsigned i = 0; i < s.size(); )
	{
		unsigned char c = s[i++];

		if (c < 0x20)
			return false;

		if (0x7e < c)
		{
			switch (c)
			{
				case 0xc2:
					c = s[i++];
					if (c != 0xb0 && c != 0xb7)
						return false;
					break;

				case 0xc3:
					switch (uint8_t(s[i++]))
					{
						case 0x80 ... 0x84:
						case 0x87 ... 0x8b:
						case 0x8d ... 0x8f:
						case 0x91 ... 0x96:
						case 0x99 ... 0x9c:
						case 0x9f ... 0xa4:
						case 0xa7 ... 0xab:
						case 0xad ... 0xaf:
						case 0xb1 ... 0xb6:
						case 0xb9 ... 0xbc: break;

						default: return false;
					}
					break;

				case 0xc4:
					switch (uint8_t(s[i++]))
					{
						case 0x80 ... 0x81:
						case 0x8a ... 0x8b:
						case 0x92 ... 0x93:
						case 0x98 ... 0x99:
						case 0x9e ... 0xa1:
						case 0xa6 ... 0xa7:
						case 0xaa ... 0xab:
						case 0xb0 ... 0xb1: break;

						default: return false;
					}
					break;

				case 0xc5:
					switch (uint8_t(s[i++]))
					{
						case 0x81 ... 0x82:
						case 0x8d ... 0x8e:
						case 0x92 ... 0x93:
						case 0x9a ... 0x9b:
						case 0x9e ... 0x9f:
						case 0xa0 ... 0xa3:
						case 0xaa ... 0xab:
						case 0xb4 ... 0xb5:
						case 0xbb ... 0xbc: break;

						default: return false;
					}
					break;

				case 0xc7:
					switch (uint8_t(s[i++]))
					{
						case 0xa5 ... 0xa6: break;

						default: return false;
					}
					break;

				case 0xc9:
					if (uint8_t(s[i++]) != 0x99)
						return false;
					break;

				case 0xca:
					switch (uint8_t(s[i++]))
					{
						case 0xbe ... 0xbf: break;

						default: return false;
					}
					break;

				case 0xcc:
					switch (uint8_t(s[i++]))
					{
						case 0x84:
						case 0x88:
						case 0xa7:
						case 0xb1: break;

						default: return false;
					}
					break;

				case 0xe1:
					switch (uint8_t(s[i++]))
					{
						case 0xb8:
							switch (uint8_t(s[i++]))
							{
								case 0x8c ... 0x91:
								case 0xa4 ... 0xa5:
								case 0xa8 ... 0xa9: break;

								default: return false;
							}
							break;

						case 0xb9:
							switch (uint8_t(s[i++]))
							{
								case 0x96 ... 0x97:
								case 0xa2 ... 0xa3:
								case 0xac ... 0xad: break;

								default: return false;
							}
							break;

						case 0xba:
							switch (uint8_t(s[i++]))
							{
								case 0x94 ... 0x96: break;
								default: return false;
							}
							break;

						default:
							return false;
					}
					break;

				case 0xe2:
					if (uint8_t(s[i++]) != 0x80)
						return false;
					switch (uint8_t(s[i++]))
					{
						case 0x98:
						case 0x99:
						case 0x9b:
						case 0x9d: break;

						default: return false;
					}
					break;

				default:
					return false;
			}
		}
	}

	return true;
}


static bool
fitsRegion4(mstl::string const& s)
{
	//^(	[\x20-\x7e]|
	//		\xc2\xb0|
	//		\xc2\xb7|
	//		\xc3[\x81-\x82]|
	//		\xc3\x84|
	//		\xc3\x87|
	//		\xc3[\x8a-\x8b]|
	//		\xc3[\x8e-\x8f]|
	//		\xc3\x94|
	//		\xc3\x96|
	//		\xc3[\x9b-\x9d]|
	//		\xc3\x9f|
	//		\xc3[\xa1-\xa2]|
	//		\xc3\xa4|
	//		\xc3\xa7|
	//		\xc3[\xaa-\xab]|
	//		\xc3[\xae-\xaf]|
	//		\xc3\xb4|
	//		\xc3\xb6|
	//		\xc3[\xbb-\xbd]|
	//		\xc4[\x80-\x81]|
	//		\xc4[\x8c-\x8d]|
	//		\xc4[\x92-\x93]|
	//		\xc4[\x96-\x97]|
	//		\xc4[\x9e-\x9f]|
	//		\xc4[\xa0-\xa1]|
	//		\xc4[\xaa-\xad]|
	//		\xc4[\xb0-\xb1]|
	//		\xc4[\xb6-\xb7]|
	//		\xc5[\x8c-\x8f]|
	//		\xc5[\x9e-\x9f]|
	//		\xc5[\xa1-\xa3]|
	//		\xc5[\xaa-\xad]|
	//		\xc6\x8f|
	//		\xc7\x9d|
	//		\xc9\x99|
	//		\xca[\xbe-\xbf]|
	//		\xcc\x84|
	//		\xcc\xa7|
	//		\xcc\xb2|
	//		\xd1\x97|
	//		\xe1\xb8[\x8c-\x91]|
	//		\xe1\xb8[\xa4-\xa5]|
	//		\xe1\xb8[\xa8-\xa9]|
	//		\xe1\xb9[\x88-\x89]|
	//		\xe1\xb9[\x9e-\x9f]|
	//		\xe1\xb9[\xa2-\xa3]|
	//		\xe1\xb9[\xac-\xaf]|
	//		\xe1\xba[\x94-\x95]|
	//		\xe2\x80[\x98-\x99]|
	//		\xe2\x80\x9b|
	//		\xe2\x80\x9d
	//)*$/
	for (unsigned i = 0; i < s.size(); )
	{
		unsigned char c = s[i++];

		if (c < 0x20)
			return false;

		if (0x7e < c)
		{
			switch (c)
			{
				case 0xc2:
					c = s[i++];
					if (c != 0xb0 && c != 0xb7)
						return false;
					break;

				case 0xc3:
					switch (uint8_t(s[i++]))
					{
						case 0x81 ... 0x82:
						case 0x84:
						case 0x87:
						case 0x8a ... 0x8b:
						case 0x8e ... 0x8f:
						case 0x94:
						case 0x96:
						case 0x9b ... 0x9d:
						case 0x9f:
						case 0xa1 ... 0xa2:
						case 0xa4:
						case 0xa7:
						case 0xaa ... 0xab:
						case 0xae ... 0xaf:
						case 0xb4:
						case 0xb6:
						case 0xbb ... 0xbd: break;

						default: return false;
					}
					break;

				case 0xc4:
					switch (uint8_t(s[i++]))
					{
						case 0x80 ... 0x81:
						case 0x8c ... 0x8d:
						case 0x92 ... 0x93:
						case 0x96 ... 0x97:
						case 0x9e ... 0x9f:
						case 0xa0 ... 0xa1:
						case 0xaa ... 0xad:
						case 0xb0 ... 0xb1:
						case 0xb6 ... 0xb7: break;

						default: return false;
					}
					break;

				case 0xc5:
					switch (uint8_t(s[i++]))
					{
						case 0x8c ... 0x8f:
						case 0x9e ... 0x9f:
						case 0xa1 ... 0xa3:
						case 0xaa ... 0xad: break;

						default: return false;
					}
					break;

				case 0xc6:
					if (uint8_t(s[i++]) != 0x8f)
						return false;
					break;

				case 0xc7:
					if (uint8_t(s[i++]) != 0x9d)
						return false;
					break;

				case 0xc9:
					if (uint8_t(s[i++]) != 0x99)
						return false;
					break;

				case 0xca:
					switch (uint8_t(s[i++]))
					{
						case 0xbe ... 0xbf: break;

						default: return false;
					}
					break;

				case 0xcc:
					switch (uint8_t(s[i++]))
					{
						case 0x84:
						case 0xa7:
						case 0xb2: break;

						default: return false;
					}
					break;

				case 0xd1:
					if (uint8_t(s[i++]) != 0x97)
						return false;
					break;

				case 0xe1:
					switch (uint8_t(s[i++]))
					{
						case 0xb8:
							switch (uint8_t(s[i++]))
							{
								case 0x8c ... 0x91:
								case 0xa4 ... 0xa5:
								case 0xa8 ... 0xa9: break;

								default: return false;
							}
							break;

						case 0xb9:
							switch (uint8_t(s[i++]))
							{
								case 0x88 ... 0x89:
								case 0x9e ... 0x9f:
								case 0xa2 ... 0xa3:
								case 0xac ... 0xaf: break;

								default: return false;
							}
							break;

						case 0xba:
							c = s[i++];
							if (c != 0x94 && c != 0x95)
								return false;
							break;

						default: return false;
					}
					break;

				case 0xe2:
					if (uint8_t(s[i++]) != 0x80)
						return false;
					switch (uint8_t(s[i++]))
					{
						case 0x98:
						case 0x99:
						case 0x9b:
						case 0x9d: break;

						default: return false;
					}
					break;

				default:
					return false;
			}
		}
	}

	return true;
}


static bool
fitsRegion5(mstl::string const& s)
{
	//^(	[\x20-\x7e]|
	//		\xc2\xb0|
	//		\xc2\xb7|
	//		\xc3[\x80-\x84]|
	//		\xc3[\x87-\x8b]|
	//		\xc3[\x8d-\x8f]|
	//		\xc3[\x91-\x96]|
	//		\xc3[\x99-\x9c]|
	//		\xc3[\x9f-\xa4]|
	//		\xc3[\xa7-\xab]|
	//		\xc3[\xad-\xaf]|
	//		\xc3[\xb1-\xb6]|
	//		\xc3[\xb9-\xbc]|
	//		\xc4[\x80-\x83]|
	//		\xc4[\x8c-\x8d]|
	//		\xc4[\x92-\x97]|
	//		\xc4[\x9a-\x9b]|
	//		\xc4[\xaa-\xad]|
	//		\xc5[\x83-\x84]|
	//		\xc5[\x8c-\x8f]|
	//		\xc5[\x92-\x93]|
	//		\xc5[\x9a-\x9b]|
	//		\xc5[\x9e-\x9f]|
	//		\xc5[\xa0-\xa3]|
	//		\xc5[\xaa-\xad]|
	//		\xc5[\xb4-\xb5]|
	//		\xc7[\x8d-\x8e]|
	//		\xcc\x84|
	//		\xcc\x86|
	//		\xcc\xa7|
	//		\xe1\xb8[\x8c-\x8d]|
	//		\xe1\xb8[\xa4-\xa5]|
	//		\xe1\xb8[\xa8-\xa9]|
	//		\xe1\xb9[\x80-\x83]|
	//		\xe1\xb9[\x84-\x87]|
	//		\xe1\xb9[\xa2-\xa3]|
	//		\xe1\xb9[\x9a-\x9b]|
	//		\xe1\xb9[\xac-\xad]|
	//		\xe1\xba[\x8e-\x8f]|
	//		\xe1\xba[\x94-\x95]|
	//		\xe2\x80[\x98-\x99]|
	//		\xe2\x80\x9b|
	//		\xe2\x80\x9d
	//)*$/
	for (unsigned i = 0; i < s.size(); )
	{
		unsigned char c = s[i++];

		if (c < 0x20)
			return false;

		if (0x7e < c)
		{
			switch (c)
			{
				case 0xc2:
					c = s[i++];
					if (c != 0xb0 && c != 0xb7)
						return false;
					break;

				case 0xc3:
					switch (uint8_t(s[i++]))
					{
						case 0x80 ... 0x84:
						case 0x87 ... 0x8b:
						case 0x8d ... 0x8f:
						case 0x91 ... 0x96:
						case 0x99 ... 0x9c:
						case 0x9f ... 0xa4:
						case 0xa7 ... 0xab:
						case 0xad ... 0xaf:
						case 0xb1 ... 0xb6:
						case 0xb9 ... 0xbc: break;

						default: return false;
					}
					break;

				case 0xc4:
					switch (uint8_t(s[i++]))
					{
						case 0x80 ... 0x83:
						case 0x8c ... 0x8d:
						case 0x92 ... 0x97:
						case 0x9a ... 0x9b:
						case 0xaa ... 0xad: break;

						default: return false;
					}
					break;

				case 0xc5:
					switch (uint8_t(s[i++]))
					{
						case 0x83 ... 0x84:
						case 0x8c ... 0x8f:
						case 0x92 ... 0x93:
						case 0x9a ... 0x9b:
						case 0x9e ... 0x9f:
						case 0xa0 ... 0xa3:
						case 0xaa ... 0xad:
						case 0xb4 ... 0xb5: break;

						default: return false;
					}
					break;

				case 0xc7:
					switch (uint8_t(s[i++]))
					{
						case 0x8d:
						case 0x8e: break;

						default: return false;
					}
					break;


				case 0xcc:
					switch (uint8_t(s[i++]))
					{
						case 0x84:
						case 0x86:
						case 0xa7: break;

						default: return false;
					}
					break;

				case 0xe1:
					switch (uint8_t(s[i++]))
					{
						case 0xb8:
							switch (uint8_t(s[i++]))
							{
								case 0x8c ... 0x8d:
								case 0xa4 ... 0xa5:
								case 0xa8 ... 0xa9: break;

								default: return false;
							}
							break;

						case 0xb9:
							switch (uint8_t(s[i++]))
							{
								case 0x80 ... 0x83:
								case 0x84 ... 0x87:
								case 0xa2 ... 0xa3:
								case 0x9a ... 0x9b:
								case 0xac ... 0xad: break;

								default: return false;
							}
							break;

						case 0xba:
							switch (uint8_t(s[i++]))
							{
								case 0x8e ... 0x8f:
								case 0x94 ... 0x95: break;

								default: return false;
							}
							break;

						default:
							return false;
					}
					break;

				case 0xe2:
					if (uint8_t(s[i++]) != 0x80)
						return false;
					switch (uint8_t(s[i++]))
					{
						case 0x98:
						case 0x99:
						case 0x9b:
						case 0x9d: break;

						default: return false;
					}
					break;

				default:
					return false;
			}
		}
	}

	return true;
}


static bool
fitsRegion6(mstl::string const& s)
{
	//^(	[\x20-\x7e]|
	//		\xc2\xb0|
	//		\xc3[\x80-\x83]|
	//		\xc3[\x87-\x8a]|
	//		\xc3[\x8c-\x8e]|
	//		\xc3\x90|
	//		\xc3[\x92-\x95]|
	//		\xc3[\x99-\x9b]|
	//		\xc3\x9d|
	//		\xc3[\xa0-\xa3]|
	//		\xc3[\xa7-\xaf]|
	//		\xc3[\xb2-\xb5]|
	//		\xc3[\xb9-\xbb]|
	//		\xc3\xbd|
	//		\xc4[\x82-\x83]|
	//		\xc4\x91|
	//		\xc4[\xa8-\xa9]|
	//		\xc5[\x92-\x93]|
	//		\xc5[\xa8-\xa9]|
	//		\xc6[\xa0-\xa1]|
	//		\xc6[\xaf-\xb0]|
	//		\xe1\xba[\xa0-\xbf]|
	//		\xe1\xbb[\x80-\xb9]
	//)*$/
	for (unsigned i = 0; i < s.size(); )
	{
		unsigned char c = s[i++];

		if (c < 0x20)
			return false;

		if (0x7e < c)
		{
			switch (c)
			{
				case 0xc2:
					c = s[i++];
					if (c != 0xb0)
						return false;
					break;

				case 0xc3:
					switch (uint8_t(s[i++]))
					{
						case 0x80 ... 0x83:
						case 0x87 ... 0x8a:
						case 0x8c ... 0x8e:
						case 0x90:
						case 0x92 ... 0x95:
						case 0x99 ... 0x9b:
						case 0x9d:
						case 0xa0 ... 0xa3:
						case 0xa7 ... 0xaf:
						case 0xb2 ... 0xb5:
						case 0xb9 ... 0xbb:
						case 0xbd:				break;

						default: return false;
					}
					break;

				case 0xc4:
					switch (uint8_t(s[i++]))
					{
						case 0x82 ... 0x83:
						case 0x91:
						case 0xa8 ... 0xa9: break;

						default: return false;
					}
					break;

				case 0xc5:
					switch (uint8_t(s[i++]))
					{
						case 0x92 ... 0x93:
						case 0xa8 ... 0xa9: break;

						default: return false;
					}
					break;

				case 0xc6:
					switch (uint8_t(s[i++]))
					{
						case 0xa0 ... 0xa1:
						case 0xaf ... 0xb0: break;

						default: return false;
					}
					break;

				case 0xe1:
					switch (uint8_t(s[i++]))
					{
						case 0xba:
							c = s[i++];
							if (c < 0xa0 || 0xbf < c)
								return false;
							break;

						case 0xbb:
							c = s[i++];
							if (c < 0x80 || 0xb9 < c)
								return false;
							break;

						default: return false;
					}
					break;

				default:
					return false;
			}
		}
	}

	return true;
}


inline static int
utfToUniChar(char const* s, Tcl_UniChar& ch)
{
	if (static_cast<unsigned char>(*s) >= 0xc0)
		return Tcl_UtfToUniChar(s, &ch);

	ch = *s;
	return 1;
}


inline static bool
isSpace(char c)
{
	return c == '-' || c == '_' || c == '.' || ::isspace(c);
}


Codec::Codec(mstl::string const& encoding)
	:m_codec(Tcl_GetEncoding(interp(), encoding))
	,m_buf(4095, ' ')
	,m_encoding(encoding)
	,m_failed(false)
	,m_isUtf8(encoding == utf8())
{
}


Codec::~Codec()
{
	if (m_codec)
		Tcl_FreeEncoding(m_codec);
}


bool
Codec::is7BitAscii(char const* s, unsigned nbytes)
{
	for (char const* e = s + nbytes; s < e; ++s)
	{
		if (*s & 0x80)
			return false;
	}

	return true;
}


unsigned
Codec::countUtfChars(mstl::string const& s)
{
	return Tcl_NumUtfChars(s, s.size());
}


unsigned
Codec::utfCharLength(char const* s)
{
	return Tcl_UtfNext(s) - s;
}


char const*
Codec::utfNextChar(char const* s)
{
	return Tcl_UtfNext(s);
}


char const*
Codec::utfNextChar(char const* s, uint16_t& code)
{
	return s + ::utfToUniChar(s, code);
}


bool
Codec::convertFromUtf8(mstl::string const& in, mstl::string& out)
{
	M_REQUIRE(hasEncoding());
	M_REQUIRE(validateUtf8(in));

	if (m_isUtf8)
	{
		out = in;
		return true;
	}

	Tcl_EncodingState state;

	char const*	src = in.c_str();
	char*			dst = m_buf.data();

	int flags	= TCL_ENCODING_START | TCL_ENCODING_END | TCL_ENCODING_STOPONERROR;
	int srcLen	= in.size();
	int dstLen	= m_buf.size();

	while (true)
	{
		int bytesIn, bytesOut, dstChars;

		int rc = Tcl_UtfToExternal(0,
											m_codec,
											src, srcLen,
											flags,
											&state,
											dst, dstLen,
											&bytesIn,
											&bytesOut,
											&dstChars);

		int soFar = dst + bytesOut - m_buf.c_str();

		if (rc == TCL_OK)
		{
			out.assign(m_buf.c_str(), soFar);
			return true;
		}

		switch (rc)
		{
			case TCL_CONVERT_NOSPACE:
				flags &= ~TCL_ENCODING_START;
				src += bytesIn;
				srcLen -= bytesIn;
				m_buf.resize(mstl::mul2(m_buf.size()));
				dst = m_buf.data() + soFar;
				dstLen = m_buf.size() - soFar;
				break;

			case TCL_CONVERT_UNKNOWN:
			case TCL_CONVERT_SYNTAX:
				flags &= ~TCL_ENCODING_STOPONERROR;
				m_failed = true;
				break;

			case TCL_CONVERT_MULTIBYTE:
				out.assign(m_buf.c_str(), soFar);
				m_failed = true;
				return false;
		}
	}

	return false;	// not reached
}


bool
Codec::convertToUtf8(mstl::string const& in, mstl::string& out)
{
	M_REQUIRE(hasEncoding());

	if (m_isUtf8)
	{
		out = in;
		return true;
	}

	Tcl_EncodingState state;

	char const*	src = in.c_str();
	char*			dst = m_buf.data();

	int flags	= TCL_ENCODING_START | TCL_ENCODING_END | TCL_ENCODING_STOPONERROR;
	int srcLen	= in.size();
	int dstLen	= m_buf.size();

	while (true)
	{
		int bytesIn, bytesOut, dstChars;

		int rc = Tcl_ExternalToUtf(0,
											m_codec,
											src, srcLen,
											flags,
											&state,
											dst, dstLen,
											&bytesIn,
											&bytesOut,
											&dstChars);

		int soFar = dst + bytesOut - m_buf.c_str();

		if (rc == TCL_OK)
		{
			// NOTE: sometimes Tcl_ExternalToUtf() is producing overlong UTF-8 sequences!
			if (!validateUtf8(m_buf, soFar))
			{
				soFar = removeOverlongSequences(m_buf.data(), soFar);

				if (validateUtf8(m_buf, soFar))
					out.assign(m_buf.c_str(), soFar);
				else if (validateUtf8(in))
					out = in;
				else
					out.assign(in.size(), '?');

				m_failed = true;
				return false;
			}

			out.assign(m_buf.c_str(), soFar);
			return true;
		}

		switch (rc)
		{
			case TCL_CONVERT_NOSPACE:
				flags &= ~TCL_ENCODING_START;
				src += bytesIn;
				srcLen -= bytesIn;
				m_buf.resize(mstl::mul2(m_buf.size()));
				dst = m_buf.data() + soFar;
				dstLen = m_buf.size() - soFar;
				break;

			case TCL_CONVERT_UNKNOWN:
			case TCL_CONVERT_SYNTAX:
				flags &= ~TCL_ENCODING_STOPONERROR;
				m_failed = true;
				break;

			case TCL_CONVERT_MULTIBYTE:
				out.assign(m_buf.c_str(), soFar);
				M_ASSERT(validateUtf8(out));
				m_failed = true;
				return false;
		}
	}

	return false;	// not reached
}


bool
Codec::fromUtf8(mstl::string const& in, mstl::string& out)
{
	M_REQUIRE(hasEncoding());

	if (!m_isUtf8 && !is7BitAscii(in, in.size()))
		return convertFromUtf8(in, out);

	out = in;
	return true;
}


bool
Codec::toUtf8(mstl::string const& in, mstl::string& out)
{
	M_REQUIRE(hasEncoding());

	if (!m_isUtf8 && !is7BitAscii(in, in.size()))
		return convertToUtf8(in, out);

	out = in;
	return true;
}


mstl::string const&
Codec::latin1()
{
	static mstl::string const utf8("iso8859-1");
	return utf8;
}


mstl::string const&
Codec::utf8()
{
	static mstl::string const utf8("utf-8");
	return utf8;
}


unsigned
Codec::firstCharToUpper(mstl::string& name)
{
	M_REQUIRE(validateUtf8(name));
	M_REQUIRE(!name.readonly());

	// IMPORTANT NOTE:
	// At this time, the case conversions are only defined for the ISO8859-1 characters.

	char* p = name.data();

	if ((*p & 0x80) == 0)
	{
		*p = ::toupper(*p);
		return 1;
	}

	Tcl_UniChar c;
	char buf[10];

	p += ::utfToUniChar(p, c);
	c = Tcl_UniCharToUpper(c);

	unsigned n = Tcl_UniCharToUtf(c, buf);
	name.replace(0, p - name.c_str(), buf, n);

	return n;
}


unsigned
Codec::firstCharToUpper(mstl::string const& name, mstl::string& result)
{
	M_REQUIRE(validateUtf8(name));
	M_REQUIRE(name.c_str() != result.c_str());

	// IMPORTANT NOTE:
	// At this time, the case conversions are only defined for the ISO8859-1 characters.

	char const* p = name.c_str();

	if (*p & 0x80)
	{
		result += ::toupper(*p);
		return 1;
	}

	Tcl_UniChar c;
	char buf[10];

	p += ::utfToUniChar(p, c);
	c = Tcl_UniCharToUpper(c);

	unsigned n = Tcl_UniCharToUtf(c, buf);
	result.assign(buf, n);

	return n;
}


int
Codec::compare(mstl::string const& lhs, mstl::string const& rhs)
{
	M_REQUIRE(validateUtf8(lhs));
	M_REQUIRE(validateUtf8(rhs));

	char const* p = lhs.c_str();
	char const* q = rhs.c_str();

	Tcl_UniChar c, d;

	while (true)
	{
		if (*p == 0) return *q == 0 ? 0 : -1;
		if (*q == 0) return *p == 0 ? 0 : +1;

		p += ::utfToUniChar(p, c);
		q += ::utfToUniChar(q, d);

		if (c != d) return c - d;
	}

	return 0;	// satisfies the compiler
}


int
Codec::casecmp(mstl::string const& lhs, mstl::string const& rhs)
{
	M_REQUIRE(validateUtf8(lhs));
	M_REQUIRE(validateUtf8(rhs));

	// IMPORTANT NOTE:
	// At this time, the case conversions are only defined for the ISO8859-1 characters.

	char const* p = lhs.c_str();
	char const* q = rhs.c_str();

	Tcl_UniChar c, d;

	while (true)
	{
		if (*p == 0) return *q == 0 ? 0 : -1;
		if (*q == 0) return *p == 0 ? 0 : +1;

		p += ::utfToUniChar(p, c);
		q += ::utfToUniChar(q, d);

		if (c != d)
		{
			c = Tcl_UniCharToLower(c);
			d = Tcl_UniCharToLower(d);

			if (c != d) return c - d;
		}
	}

	return 0;	// satisfies the compiler
}


bool
Codec::caseMatch(mstl::string const& lhs, mstl::string const& rhs, unsigned size)
{
	M_REQUIRE(validateUtf8(lhs));
	M_REQUIRE(validateUtf8(rhs));

	// IMPORTANT NOTE:
	// At this time, the case conversions are only defined for the ISO8859-1 characters.

	char const* p = lhs.c_str();
	char const* q = rhs.c_str();
	char const* e = p + size;
	char const* f = q + size;

	Tcl_UniChar c, d;

	while (p < e && q < f)
	{
		if (*p == 0)
			return false;
		if (*q == 0)
			return true;

		p += ::utfToUniChar(p, c);
		q += ::utfToUniChar(q, d);

		if (c != d)
		{
			c = Tcl_UniCharToLower(c);
			d = Tcl_UniCharToLower(d);

			if (c != d)
				return false;
		}
	}

	return true;
}


unsigned
Codec::levenstein(	mstl::string const& lhs,
							mstl::string const& rhs,
							unsigned ins,
							unsigned del,
							unsigned sub)
{
	// we have to restrict array size
	M_REQUIRE(countUtfChars(lhs) < 256);
	M_REQUIRE(countUtfChars(rhs) < 256);

	unsigned lhsSize = countUtfChars(lhs);
	unsigned rhsSize = countUtfChars(rhs);

	if (lhsSize == 0)
		return rhsSize*ins;
	if (rhsSize == 0)
		return lhsSize*ins;

	// algorithm from http://en.wikipedia.org/wiki/Levenshtein_distance

	uint16_t		d[256][256];
	Tcl_UniChar	c[256];

	for (unsigned i = 0; i <= lhsSize; ++i)
		d[i][0] = i;
	for (unsigned j = 0; j <= rhsSize; ++j)
		d[0][j] = j;

	char const* ls = lhs.c_str();
	char const* rs = rhs.c_str();

	for (unsigned i = 0; i < lhsSize; ++i)
		ls += ::utfToUniChar(rs, c[i]);

	for (unsigned j = 0; j < rhsSize; ++j)
	{
		Tcl_UniChar b;
		rs += ::utfToUniChar(rs, b);

		for (unsigned i = 0; i < lhsSize; ++i)
		{
			if (c[i] == b)
				d[i + 1][j + 1] = d[i][j];
			else
				d[i + 1][j + 1] = mstl::min(d[i][j + 1] + del, d[i + 1][j] + ins, d[i][j] + sub);
		}
	}

	return d[lhsSize][rhsSize];
}


void
Codec::mapFromGerman(mstl::string const& name, mstl::string& result)
{
	M_REQUIRE(fitsRegion(name, 1));

	char const* s = name.begin();
	char const* e = name.end();

	result.clear();
	result.reserve(mstl::mul2(name.size()));

	while (s < e)
	{
		Tcl_UniChar c;
		s += ::utfToUniChar(s, c);

		if (c < 0x80)
		{
			result += c;
		}
		else
		{
			char const* m = ::GermanMap[c & 0x7f];

			result += m[0];

			if (m[1])
				result += m[1];
		}
	}
}


bool
Codec::matchAscii(mstl::string const& utf8, mstl::string const& ascii)
{
	M_REQUIRE(is7BitAscii(ascii));

	// IMPORTANT NOTE:
	// At this time, the match algorithm is only defined for the ISO8859-1 characters.

	if (utf8.size() < ascii.size())
		return false;

	char const* s = ascii.begin();
	char const* e = ascii.end();
	char const* t = utf8.begin();
	char const* f = utf8.end();

	Tcl_UniChar c;

	while (t < f)
	{
		if (s == e)
			return false;

		t += ::utfToUniChar(t, c);

		if (c < 0x80)
		{
			if (c != *s++)
				return false;
		}
		else
		{
			char const* m = ::Latin1Map[c & 0x7f];

			if (m[0] != *s++)
				return false;

			if (s == e)
				return false;

			if (m[1] && m[1] != *s++)
				return false;
		}
	}

	return true;
}


bool
Codec::matchGerman(mstl::string const& utf8, mstl::string const& ascii)
{
	M_REQUIRE(is7BitAscii(ascii));

	// IMPORTANT NOTE:
	// At this time, the match algorithm is only defined for the ISO8859-1 characters.

	if (utf8.size() < ascii.size())
		return false;

	char const* s = ascii.begin();
	char const* e = ascii.end();
	char const* t = utf8.begin();
	char const* f = utf8.end();

	Tcl_UniChar c;

	while (t < f)
	{
		if (s == e)
			return false;

		t += ::utfToUniChar(t, c);

		if (c < 0x80)
		{
			if (c != *s++)
				return false;
		}
		else
		{
			char const* m = ::GermanMap[c & 0x7f];

			if (m[0] != *s++)
				return false;

			if (s == e)
				return false;

			if (m[1] && m[1] != *s++)
				return false;
		}
	}

	return true;
}


bool
Codec::isLatin1(mstl::string const& s) const
{
	for (unsigned i = 0; i < s.size(); ++i)
	{
		unsigned char c = s[i];

		if (c & 0x80)
		{
			if (c < 0xc2 || 0xc3 < c)
				return false;

			c = s[++i];

			if (c < 0x80 || 0xbf < c)
				return false;
		}
	}

	return false;
}


bool
Codec::validateUtf8(char const* utf8, unsigned nbytes)
{
	// adopted from Frank Yung-Fong Tang <http://people.netscape.com/ftang/utf8/isutf8.c>
	//
	// Valid octet sequences:
	// 00-7f
	//	c2-df	80-bf
	//	e0		a0-bf 80-bf
	//	e1-ec	80-bf 80-bf
	//	ed		80-9f 80-bf
	//	ee-ef	80-bf 80-bf
	//	f0		90-bf 80-bf 80-bf
	//	f1-f3	80-bf 80-bf 80-bf
	//	f4		80-8f 80-bf 80-bf

	enum State { Start, A, B, C, D, E, F, G, Error };

	static int const Byte_Class_Lookup_Tbl[256] =
	{
//		00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 00
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 10
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 20
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 30
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 40
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 50
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 60
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 70
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 80
		2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, // 90
		3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, // A0
		3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, // B0
		4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, // C0
		5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, // D0
		6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, // E0
		9,10,10,10,11, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, // F0
	};

#define _ Error
	static enum State const State_Transition_Tbl[12][8] =
	{
//		  Start  A      B      C      D      E      F      G
		{ Start, _    , _    , _    , _    , _    , _    , _    }, //  0: 00-7f
		{ _    , Start, A    , _    , A    , B    , _    , B    }, //  1: 80-8f
		{ _    , Start, A    , _    , A    , B    , B    , _    }, //  2: 90-9f
		{ _    , Start, A    , A    , _    , B    , B    , _    }, //  3: a0-bf
		{ _    , _    , _    , _    , _    , _    , _    , _    }, //  4: c0-c1, f5-ff
		{ A    , _    , _    , _    , _    , _    , _    , _    }, //  5: c2-df
		{ C    , _    , _    , _    , _    , _    , _    , _    }, //  6: e0
		{ B    , _    , _    , _    , _    , _    , _    , _    }, //  7: e1-ec, ee-ef
		{ D    , _    , _    , _    , _    , _    , _    , _    }, //  8: ed
		{ F    , _    , _    , _    , _    , _    , _    , _    }, //  9: f0
		{ E    , _    , _    , _    , _    , _    , _    , _    }, // 10: f1-f3
		{ G    , _    , _    , _    , _    , _    , _    , _    }, // 11: f4
	};
#undef _

	M_ASSERT(utf8);

	State state = Start;

	for (char const* e = utf8 + nbytes; utf8 < e; ++utf8)
	{
		state = State_Transition_Tbl[Byte_Class_Lookup_Tbl[static_cast<unsigned char>(*utf8)]][state];

		if (state == Error)
			return false;
	}

	return state == Start;
}


unsigned
Codec::removeOverlongSequences(char* s, unsigned size)
{
	// remove overlong sequences:
	//		c0 xx
	//		e0 80 xx
	//		f0 80 80 xx
	//		f8 80 80 80 xx
	//		fc 80 80 80 80 xx

	char const*	e = s + size;
	char const*	p = s;
	char*			q = s;

	while (s < e)
	{
		switch (static_cast<unsigned char>(*s))
		{
			case 0xc0:
				s += 2;
				*q++ = '?';
				continue;

			case 0xe0:
				if (s[1] == char(0x80))
				{
					s += 3;
					*q++ = '?';
					continue;
				}
				break;

			case 0xf0:
				if (s[1] == char(0x80) && s[2] == char(0x80))
				{
					s += 4;
					*q++ = '?';
					continue;
				}
				break;

			case 0xf8:
				if (s[1] == char(0x80) && s[2] == char(0x80) && s[3] == char(0x80))
				{
					s += 5;
					*q++ = '?';
					continue;
				}
				break;

			case 0xfc:
				if (s[1] == char(0x80) && s[2] == char(0x80) && s[3] == char(0x80) && s[4] == char(0x80))
				{
					s += 6;
					*q++ = '?';
					continue;
				}
				break;
		}

		char const*	t = Tcl_UtfNext(s);
		unsigned		n = t - s;

		::memcpy(q, s, n);
		s += n;
		q += n;
	}

	*q = '\0';
	return q - p;
}


void
Codec::makeShortName(mstl::string const& name, mstl::string& result)
{
	// NOTE: we assume ASCII spaces

	char const* p = name.c_str();

	if (*p == '\0')
	{
		result.clear();
		return;
	}

	Tcl_UniChar u;
	char const* q = p + ::utfToUniChar(p, u);

	while (u && Tcl_UniCharIsAlpha(u))
	{
		p = q;
		while (::isalpha(*p))
			p = Tcl_UtfNext(p);
		if (*p == '-')
			++p;
		while (::isSpace(*p))
			++p;
		q = p + ::utfToUniChar(p, u);
	}

	while (p > name.c_str() && ::isSpace(p[-1]))
		--p;

	if (p > name.c_str() + 1 && ::isspace(p[-2]))
	{
		p -= 2;
		while (p > name.c_str() &&::isspace(p[-1]))
			--p;
	}

	result.assign(name, p - name.c_str());
}


bool
Codec::fitsRegion(mstl::string const& s, unsigned region)
{
	M_REQUIRE(region <= U_NUMBER_OF(NonDiacriticsLookup));

	switch (region)
	{
		case 0: return is7BitAscii(s);
		case 1: return ::fitsRegion1(s); break;
		case 2: return ::fitsRegion2(s); break;
		case 3: return ::fitsRegion3(s); break;
		case 4: return ::fitsRegion4(s); break;
		case 5: return ::fitsRegion5(s); break;
		case 6: return ::fitsRegion6(s); break;
	}

	return false;	// never reached
}


mstl::string const&
Codec::convertToNonDiacritics(unsigned region, mstl::string const& s, mstl::string& buffer)
{
	M_REQUIRE(region <= U_NUMBER_OF(NonDiacriticsLookup));
	M_REQUIRE(fitsRegion(s, region));
	M_REQUIRE(s.c_str() != buffer.c_str());

	if (region == 0)
		return s;

	buffer.clear();
	buffer.reserve(mstl::mul2(s.size()));

	char const* const** lookup = NonDiacriticsLookup[region - 1];

	char const* p = s.begin();
	char const* e = s.end();

	while (p < e)
	{
		Tcl_UniChar u;

		p += ::utfToUniChar(p, u);

		M_ASSERT(unsigned(u >> 8) < U_NUMBER_OF(NonDiacriticsLookup[0]));

		char const* const* table = lookup[u >> 8];

		M_ASSERT(table);

		char const* q = table[u & 0xff];

		M_ASSERT(q);

		if (q[0])
		{
			buffer += q[0];

			if (q[1])
				buffer += q[1];
		}
	}

	return buffer;
}

// vi:set ts=3 sw=3:
