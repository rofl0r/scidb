#!/bin/sh
# configure:
#    Makefile configuration script for Scidb.
#
# This program tries to determine system-specific details needed
# for compiling Scidb (such as the version of Tcl/Tk you have
# installed, and where to find the Tcl/Tk header and library 
# files), and creates the file "Makefile".


# Try to find the best version of Tcl/Tk 8.x that is installed,
# by searching the PATH directories for tclsh8.5, tclsh85, etc. If no
# tclsh program with a version number in the file name is found, the
# default program to execute is just tclsh.
# The backslashes at the end of these lines are needed: \
tclsh=tclsh; \
for tclver in 85 8.5 86 8.6; do \
    IFS=:; \
    for dir in $PATH; do \
        if [ -x $dir/tclsh$tclver ]; \
            then tclsh=$dir/tclsh$tclver; \
        fi; \
    done; \
done

# Now execute this script using the best tclsh version found:
# The backslash at the end of this line is needed: \
exec $tclsh "$0" ${1+"$@"}


proc stripDot {version} { return "[string index $version 0][string index $version 2]" }


proc findBestTclVersion {} {
    global env

    set versions {8.6 8.5}

    foreach version $versions {
        lappend paths                                \
            /usr/local/include/tk$version            \
            /usr/local/include/tk[stripDot $version] \
            ;
    }
    lappend paths             \
        /usr/local/tk/include \
        /usr/local/include     \
        ;
    foreach version $versions {
        lappend paths                          \
            /usr/include/tk$version            \
            /usr/include/tk[stripDot $version] \
            ;
    }
    lappend paths                \
        /usr/include             \
        /usr/X11/include         \
        /usr/X11R6/include       \
        /usr/X11R/include        \
        /usr/local/X11/include   \
        /usr/local/X11R6/include \
        /opt/tcltk/include       \
        /opt/include             \
        ;

    foreach dir $paths {
        if {[file isdirectory $dir]} {
            if {[file exists $dir/tk.h]} {
                set f [open $dir/tk.h r]
                while {[gets $f line] >= 0} {
                    if {[string match {\#define*TK_VERSION*} $line]} {
                        set ver [lindex [split $line \"] 1]
                        if {$ver in $versions} {
                            close $f
                            return $ver
                        }
                    }
                }
                close $f
            }
        }
    }

    foreach version $versions {
        foreach dir $env(PATH) {
            if {[file exists $dir/tclsh$version]} { return $version }
            if {[file exists $dir/tclsh[stripDot $version]]} { return $version }
        }
    }

    return [lindex $versions end]
}


# Default values for Makefile settings:

array set configure {
    prefix          /usr/local
    exec-prefix     /usr/local
    program-suffix  {}
}
set configure(tcl-version) [findBestTclVersion]

array set package {
    zlib-inc     {}
    zlib-lib     -lz
    zziplib-inc  {}
    zziplib-lib  -lzzip
    expat-inc    {}
    expat-lib    -lexpat
}

array set feature {
    symbols         no
    assertions      no
    gprof-profiling no
    gcov-coverage   no
    debug-si4       no
    splash-screen   yes
}

array set environment {
    CC          gcc
    CFLAGS      "-Wall"
    CXX         g++
    CXXFLAGS    "-Wall"
    LDFLAGS     {}
    OPTIMIZE    "-O3 -funit-at-a-time -fomit-frame-pointer"
    AR          ar
    ARFLAGS     rc
    RANLIB      ranlib
    STRIP       strip
}

array set compiler {
    simd            {}
    thread-support  {}
}

array set defaults {
    tcl-inc     -I/usr/include
    tcl-lib     -ltcl\$(TCL_VERSION)
    tk-inc      -I/usr/include
    tk-lib      -ltk\$(TCL_VERSION)
    x-inc       -I/usr/include
    x-lib       {-L/usr/X11R6/lib -lX11}
    xcursor-lib {-L/usr/lib -lXcursor}
}

array set subdir {
    zlib    {}
    zziplib {}
    expat   {}
}

foreach name [array names environment] {
    if {[info exists env($name)]} {
        set environment($name) $env($name)
    }
}


proc MakeOption {prefix path} {
    if {[string first $path " "] == -1} {
        return $prefix$path
    }
    return $prefix\"$path\"
}


proc Append {var str} {
    if {[string length $str]} {
        if {[string length $var] > 0} {
            uplevel { append var " " }
        }
        uplevel [list append $var $str ]
    }
}


# FindDir:
#    Returns the first directory in the list "path" that contains a
#    readable file matching the wildcard pattern "f".
#    If exp is provided, the directory of the first such file that also
#    has a line containing the regular expression "exp" is returned. If
#    none of the found files contains the expression, the first file
#    found is returned.
#
proc FindDir {f path {exp ""}} {
    set best ""

    foreach dir $path {
        set p [file join $dir $f]
        if {![catch {glob $p}]} {
            if {$best == ""} { set best $p }
            if {$exp != ""} {
                if {[catch {exec grep -c $exp $p}] == 0} {
                    return $dir
                } else {
                    # puts "$p skipped, not right version"
                }
            } else {
                return $dir 
            }
        }
    }

    return $best
}


# findTclTkPathsDarwin:
#    Set-up paths using frameworks. Since frameworks are quite
#    different, the UNIX search logic is not sharable:
proc FindTclTkPathsAqua {} {
    global configure package tclv

    set frameworkPaths "\
        [ file nativename ~/Library/Frameworks ] \
        /Library/Frameworks \
        /Network/Library/Frameworks \
        /System/Library/Frameworks \
    "
    set fw_path ""
    # Find the path to the Tcl and Tk frameworks:
    foreach F $frameworkPaths {
        set both 1
        foreach fw {"Tcl" "Tk"} {
            # Both Tcl.framework and Tk.framework must be present:
            if {![file exists "$F/$fw.framework/Versions/$tclv"]} {
                set both 0
                break
            }
        }
        if {$both == 1} {
            # $F has both frameworks, continue:
            set fw_path $F
            break
        }
    }
    if {$both == 0} {
        # Couldn't find Tcl and Tk frameworks, keep searching the "unix" way:
        return 0
    }
    if {![info exists configure(tcl-includes)]} {
        set configure(tcl-includes) $fw_path
        set package(tcl-inc) "-F$fw_path/Tcl.framework -F$fw_path/Tk.framework"
    }
    if {![info exists configure(tcl-libraries)]} {
        set configure(tcl-libraries) ""
        set package(tcl-lib) "-framework Tcl"
    }
    if {![info exists configure(tk-libraries)]} {
        set configure(tk-libraries) ""
        set package(tk-lib) [list $configure(tcl-libraries) -framework Tk]
    }
    puts "    Location of Tcl/Tk frameworks: $fw_path"
    return 1
}


# findTclTkPaths:
#    Finds all details of the Tcl/Tk installation.
#    Returns 1 on success, 0 on failure.
#
proc findTclTkPaths {} {
    global tclv tclv_nodot configure package tcl_platform

    if {"$tcl_platform(os)" eq "Darwin" && [FindTclTkPathsAqua]} {
        # Frameworks found, stop looking for paths:
        return 1
    }

    # IMPORTANT NOTE:
    # Ubuntu 11.04 (Natty Narwhal) has severe bugs: missing link
    # libXcursor.so to libXcursor.so.1.0.2, missing links from /usr/lib
    # to /usr/local/lib/i386-linux-gnu (and /usr/local/lib/x86_64-linux-gnu).

    # X header path: List of possible locations for X.h
    set path(x,includes) {
        /usr/local/include
        /usr/include
    }

    # X library path: List of possible locations of X library.
    set path(x,libraries) {
        /usr/local/lib
        /usr/local/lib64
        /usr/local/lib/i386-linux-gnu
        /usr/local/lib/x86_64-linux-gnu
        /usr/local/X11/lib
        /usr/local/X11R6/lib
        /usr/local/X/lib
        /usr/lib
        /usr/lib64
        /usr/lib/i386-linux-gnu
        /usr/lib/x86_64-linux-gnu
        /usr/X11/lib
        /usr/X11R6/lib
        /usr/X/lib
        /usr/openwin/lib
    }

    # Tcl/Tk header path: List of possible locations for tcl.h and tk.h
    set path(tcl,includes) [list                              \
        /usr/$configure(exec-prefix)/include/tcl${tclv}       \
        /usr/$configure(exec-prefix)/include/tcl${tclv_nodot} \
        /usr/$configure(exec-prefix)/include/tk${tclv}        \
        /usr/$configure(exec-prefix)/include/tk${tclv_nodot}  \
        /usr/$configure(prefix)/include/tcl${tclv}            \
        /usr/$configure(prefix)/include/tcl${tclv_nodot}      \
        /usr/$configure(prefix)/include/tk${tclv}             \
        /usr/$configure(prefix)/include/tk${tclv_nodot}       \
        /usr/local/include/tcl${tclv}                         \
        /usr/local/include/tcl${tclv_nodot}                   \
        /usr/local/include/tk${tclv}                          \
        /usr/local/include/tk${tclv_nodot}                    \
        /usr/local/tcl/include                                \
        /usr/local/include                                    \
        /usr/include/tcl${tclv}                               \
        /usr/include/tcl${tclv_nodot}                         \
        /usr/include/tk${tclv}                                \
        /usr/include/tk${tclv_nodot}                          \
        /usr/include                                          \
        /usr/X11/include                                      \
        /usr/X11R6/include                                    \
        /usr/local/X11/include                                \
        /opt/tcltk/include                                    \
        /usr/X11R/include                                     \
        /usr/$configure(exec-prefix)/tcl${tclv}/generic       \
        /usr/$configure(exec-prefix)/tcl${tclv_nodot}/generic \
        /usr/$configure(exec-prefix)/tk${tclv}/generic        \
        /usr/$configure(exec-prefix)/tk${tclv_nodot}/generic  \
        /usr/$configure(prefix)/tcl${tclv}/generic            \
        /usr/$configure(prefix)/tcl${tclv_nodot}/generic      \
        /usr/$configure(prefix)/tk${tclv}/generic             \
        /usr/$configure(prefix)/tk${tclv_nodot}/generic       \
        /usr/local/tcl${tclv}/generic                         \
        /usr/local/tcl${tclv_nodot}/generic                   \
        /usr/local/tk${tclv}/generic                          \
        /usr/local/tk${tclv_nodot}/generic                    \
    ]
    set path(tk,includes) $path(tcl,includes)

    # Tcl/Tk library path: List of possible locations of Tcl/Tk library.
    set path(tcl,libraries) [list                          \
        /usr/$configure(exec-prefix)/lib/tcl${tclv}        \
        /usr/$configure(exec-prefix)/lib/tcl${tclv_nodot}  \
        /usr/$configure(exec-prefix)/lib/tk${tclv}         \
        /usr/$configure(exec-prefix)/lib/tk${tclv_nodot}   \
        /usr/$configure(prefix)/lib/tcl${tclv}             \
        /usr/$configure(prefix)/lib/tcl${tclv_nodot}       \
        /usr/$configure(prefix)/lib/tk${tclv}              \
        /usr/$configure(prefix)/lib/tk${tclv_nodot}        \
        /usr/local/lib/tcl${tclv}                          \
        /usr/local/lib/tcl${tclv_nodot}                    \
        /usr/local/lib/tk${tclv}                           \
        /usr/local/lib/tk${tclv_nodot}                     \
        /usr/local/tcl/lib                                 \
        /usr/local/lib                                     \
        /usr/local/lib64                                   \
        /usr/lib/tcl${tclv}                                \
        /usr/lib/tcl${tclv_nodot}                          \
        /usr/lib/tk${tclv}                                 \
        /usr/lib/tk${tclv_nodot}                           \
        /usr/lib                                           \
        /usr/lib64                                         \
        /usr/X11R6/lib                                     \
        /opt/tcltk/lib                                     \
    ]

    # Try to add tcl_library and auto_path values to path(tcl,libraries),
    # in case the user has a non-standard Tcl/Tk library location:

    if {[info exists ::tcl_library]} {
        lappend path(tcl,includes) [file join [file dirname [file dirname $::tcl_library]] include]
        lappend path(tcl,libraries) [file dirname $::tcl_library]
        lappend path(tcl,libraries) $::tcl_library
    }
    if {[info exists ::auto_path]} {
        foreach name $::auto_path {
            lappend path(tcl,libraries) $name
        }
    }
    set path(tk,libraries) $path(tcl,libraries)

    set exp(tcl) "TCL_VERSION.*$tclv"
    set exp(tk)  "TK_VERSION.*$tclv"
    set exp(x)   ""

    foreach module {tcl tk} {
        if {![info exists configure($module-includes)]} {
            set file "$module.h"
            puts -nonewline "    Location of $file: "
            set configure($module-includes) [FindDir $file $path($module,includes) $exp($module)]
            if {[string length $configure($module-includes)] == 0} {
                puts "not found"
            } else {
                set package($module-inc) [MakeOption -I $configure($module-includes)]
                puts $configure($module-includes)
            }
        }
    }

    foreach module {tcl tk} {
        if {![info exists configure($module-libraries)]} {
            set libPaths $path($module,libraries)
            set configure($module-libraries) [FindDir "lib${module}${tclv}.*" $libPaths]
            if {[string length $configure($module-libraries)] == 0} {
                set configure($module-libraries) [FindDir "lib${module}${tclv_nodot}.*" $libPaths]
                if {[string length $configure($module-libraries)] > 0} {
                    set package($module-lib) $configure($module-libraries)
                }
            } else {
                 set package($module-lib) [MakeOption -L $configure($module-libraries)]
            }
            puts -nonewline "    Location of [string toupper $module 0 0] $tclv library: "
            if {[info exists package($module-lib)]} {
                append opt " " $package($module-lib)
                append package($module-lib) " " -l$module\$(TCL_VERSION)
                puts $configure($module-libraries)
            } else {
                puts "not found"
            }
        }
    }

    if {![info exists configure(x-includes)]} {
        set file X11/Xlib.h
        puts -nonewline "    Location of $file: "
        set configure(x-includes) [FindDir $file $path(x,includes) $exp($module)]
        if {[string length $configure(x-includes)] == 0} {
            puts "not found"
        } else {
            set n [expr {[string length $configure(x-includes)] - [string length $file] - 2}]
            set configure(x-includes) [string range $configure(x-includes) 0 $n]
            set package(x-inc) [MakeOption -I $configure(x-includes)]
            puts $configure(x-includes)
        }
    }

    if {![info exists configure(x-libraries)]} {
        set configure(x-libraries) [FindDir "libX11*" $path(x,libraries)]
        puts -nonewline "    Location of X11 library: "
        if {[string length $configure(x-libraries)] == 0} {
            puts "not found"
        } else {
            set package(x-lib) [MakeOption -L $configure(x-libraries)]
            append package(x-lib) " -lX11"
            puts $configure(x-libraries)
        }
    }

    if {![info exists configure(xcursor-libraries)]} {
        set configure(xcursor-libraries) [FindDir "libXcursor*" $path(x,libraries)]
        puts -nonewline "    Location of Xcursor library: "
        if {[string length $configure(xcursor-libraries)] == 0} {
            puts "not found"
        } else {
            # Because of an Ubuntu 11.04 (Natty Narwhal) bug we have
            # to check the library path.
            if {[file exists $configure(xcursor-libraries)/libXcursor.so]} {
                # this is the normal case
                set package(xcursor-lib) [MakeOption -L $configure(xcursor-libraries)]
                append package(xcursor-lib) " -lXcursor"
                puts $configure(xcursor-libraries)
            } else {
                # special case on Ubuntu 11.04
                set files [glob -directory $configure(xcursor-libraries) -nocomplain libXcursor.so.*]
                if {[llength $files] == 0} {
                    puts "not found"
                } else {
                    # only libXursor.so.1.0.2 is existing
                    set package(xcursor-lib) [lindex $files 0]
                    puts $package(xcursor-lib)
                }
            }
        }
    }

    if {[info exists package(x-inc)]} {
        set package(xcursor-inc) $package(x-inc)
    }

    foreach {module} {tcl tk x xcursor} {
        foreach type {inc lib} {
            if {![info exists package($module-$type)]} {
                return 0
            }
        }
    }

    return 1
}


# testzlib_sh:
#    Script used to test if the system has zlib installed,
#    and if it is the right version.
#
set TestZlib {#!/bin/sh
cat <<EOF > testzlib.c
#include <zlib.h>
int main()
{
    z_streamp z;
    deflateInit(z, 0);
    (void)crc32_combine(0, 0, 0);
    return 0;
}
EOF

__CC__ -o testzlib testzlib.c __zlib-inc__ __zlib-lib__
if [ -f testzlib ]; then
    exit 0
else
    exit 1
fi
}


# SystemHasZlib:
#    Determines if the system has zlib installed. If not,
#    the zlib version that comes with Scidb will be used.
#
proc SystemHasZlib {} {
    global TestZlib
    global environment
    global package

    set testZlib [regsub -all __CC__ $TestZlib $environment(CC)]
    set testZlib [regsub -all __zlib-inc__ $testZlib $package(zlib-inc)]
    set testZlib [regsub -all __zlib-lib__ $testZlib $package(zlib-lib)]

    flush stdout
    if {[catch {open testzlib.sh w} f]} { return 0 }
    puts $f $testZlib
    close $f
    set result 0
    if {![catch {exec sh testzlib.sh} err]} { set result 1 }
    catch { file delete -force testzlib.sh }
    catch { file delete -force testzlib.c }
    catch { file delete -force testzlib }
    return $result
}


# checkZlib:
#    Checks whether the system has the zlib compression library installed,
#    if necessary. 
#
proc checkZlib {} {
    global environment package subdir

    if {[string first "libz." $environment(LDFLAGS)] >= 0} {
        return
    }
    puts -nonewline "    Checking if your system already has zlib installed: "
    flush stdout
    if {[SystemHasZlib]} {
        puts "yes."
    } else {
        puts "no."
        set subdir(zlib) "util/zlib"
        set package(zlib-lib) "util/zlib/libz.a"
    }
}


# testzziplib_sh:
#    Script used to test if the system has zziplib installed.
#
set TestZziplib {#!/bin/sh
cat <<EOF > testzziplib.c
#include <zzip/zzip.h>
int main()
{
    (void)zzip_get_default_io();
    return 0;
}
EOF

__CC__ -o testzziplib testzziplib.c __zziplib-inc__ __zziplib-lib__
if [ -f testzziplib ]; then
    exit 0
else
    exit 1
fi
}


# SystemHasZziplib:
#    Determines if the system has zziplib installed. If not,
#    the zziplib version that comes with Scidb will be used.
#
proc SystemHasZziplib {} {
    global TestZziplib
    global environment
    global package

    set testZziplib [regsub -all __CC__ $TestZziplib $environment(CC)]
    set testZziplib [regsub -all __zziplib-inc__ $testZziplib $package(zziplib-inc)]
    set testZziplib [regsub -all __zziplib-lib__ $testZziplib $package(zziplib-lib)]

    flush stdout
    if {[catch {open testzziplib.sh w} f]} { return 0 }
    puts $f [regsub -all __CC__ $testZziplib $environment(CC)]
    close $f
    set result 0
    if {![catch {exec sh testzziplib.sh} err]} { set result 1 }
    catch { file delete -force testzziplib.sh }
    catch { file delete -force testzziplib.c }
    catch { file delete -force testzziplib }
    return $result
}


# checkZziplib:
#    Checks whether the system has the zziplib compression library installed,
#    if necessary. 
#
proc checkZziplib {} {
    global environment package subdir

    if {[string first "libzzip." $environment(LDFLAGS)] >= 0} {
        return
    }
    puts -nonewline "    Checking if your system already has zziplib installed: "
    flush stdout
    if {[SystemHasZziplib]} {
        puts "yes."
    } else {
        puts "no."
        set subdir(zziplib) "util/zzip"
        set package(zziplib-lib) "util/zzip/libzzip.a"
    }
}


# TestExpat.sh:
#    Script used to test if the system has expat installed.
#
set TestExpat {#!/bin/sh
cat <<EOF > testexpat.c
#include <expat.h>
int main()
{
    XML_Parser p = XML_ParserCreate(NULL);
    XML_ParserFree(p);
    return 0;
}
EOF

__CC__ -o testexpat testexpat.c __expat-inc__ __expat-lib__
if [ -f testexpat ]; then
    exit 0
else
    exit 1
fi
}


# SystemHasExpat:
#    Determines if the system has expat installed. If not,
#    the expat version that comes with Scidb will be used.
#
proc SystemHasExpat {} {
    global TestExpat
    global environment
    global package

    set testExpat [regsub -all __CC__ $TestExpat $environment(CC)]
    set testExpat [regsub -all __expat-inc__ $testExpat $package(expat-inc)]
    set testExpat [regsub -all __expat-lib__ $testExpat $package(expat-lib)]

    flush stdout
    if {[catch {open testexpat.sh w} f]} { return 0 }
    puts $f [regsub -all __CC__ $testExpat $environment(CC)]
    close $f
    set result 0
    if {![catch {exec sh testexpat.sh} err]} { set result 1 }
    catch { file delete -force testexpat.sh }
    catch { file delete -force testexpat.c }
    catch { file delete -force testexpat }
    return $result
}


# checExpat:
#    Checks whether the system has the expat XML library installed,
#    if necessary. 
#
proc checkExpat {} {
    global environment subdir package

    if {[string first "libz." $environment(LDFLAGS)] >= 0} {
        return
    }
    puts -nonewline "    Checking if your system already has expat installed: "
    flush stdout
    if {[SystemHasExpat]} {
        puts "yes."
    } else {
        puts "no."
        set subdir(expat) "util/expat"
        set package(expat-lib) "util/expat/libexpat.a"
    }
}


# TestGCC.sh:
#    Script used to test if the system has expat installed.
#
set TestGCC {#!/bin/sh
cat <<EOF > testgcc.c
#define GNUC_PREREQ(maj,min) ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
int main()
{
#if GNUC_PREREQ(3,4)
    return 0;
#endif
    return 1;
}
EOF

__CC__ -o testgcc testgcc.c -lz
if [ -f testgcc ]; then
    rc=`./testgcc`
    exit $rc
else
    exit -1
fi
}


# TestSSE2.sh:
#    Script used to test if gcc supports SSE2 (required for jpeg library).
#
set TestSSE2 {#!/bin/sh
cat <<EOF > testsse2.c
int main()
{
    return 1;
}
EOF

__CC__ -o testsse2 testsse2.c -msse2
if [ -f testsse2 ]; then
    exit 0
else
    exit 1
fi
}


# TestSyncBuiltin.sh:
#    Script used to test if the system supports the __sync builtin functions.
#
#   On some system the compiler is newer than the libc library. In this case
#   it may happen that the __sync_val_compare_and_swap symbol is not contained
#   in libc, but required for linking the application. In this case we forbid
#   the usage of __sync_val_compare_and_swap().
#
set TestSyncBuiltin {#!/bin/sh
cat <<EOF > testSyncBuiltin.c
int main()
{
    int v;
    __sync_val_compare_and_swap(&v, v, v);
    return 1;
}
EOF

__CC__ -o testSyncBuiltin testSyncBuiltin.c
if [ -f testSyncBuiltin ]; then
    exit 0
else
    exit 1
fi
}


# checkGCC:
#    Checks whether gcc/g++ is installed (minimum version is 3.4).
proc checkGCC {cc} {
    global TestGCC
    global TestSSE2
    global TestSyncBuiltin
    global environment
    global compiler

    if {$cc eq "CC"} { set gcc gcc } else { set gcc g++ }
    puts -nonewline "    Checking if your system has $gcc installed: "
    flush stdout
    if {[catch {open testgcc.sh w} f]} { return "" }
    puts $f [regsub -all __CC__ $TestGCC $environment($cc)]
    close $f
    set version ""
    set result 0
    if {![catch {exec sh testgcc.sh} err]} { set result 1 }
    catch {exec sh testgcc.sh} err
    catch { file delete -force testgcc.sh }
    catch { file delete -force testgcc.c }
    catch { file delete -force testgcc }
    if {[string length $err]} {
        puts "no,\n    '$environment($cc): command not found'"
    } else {
        catch {exec $environment($cc) -v} version
        set i [string first "gcc version " $version]
        if {$i >= 0} {
            incr i 12
            set version [string range $version $i [expr {$i + 2}]]
        } else {
            set result 0
            set version ""
        }
        if {$result == 1} {
            puts "yes (version $version)."
        } else {
            if {[string length $version]} {
                puts "yes,\n    but existing $gcc version $version is too old."
            } else {
                puts "yes,\n    but existing $gcc version is too old."
            }
            set version ""
        }
    }
    if {$result && $cc eq "CXX"} {
        puts -nonewline "    Checking if your compiler supports SSE2: "
        flush stdout
        if {![catch {open testsse2.sh w} f]} {
            puts $f [regsub -all __CC__ $TestSSE2 $environment($cc)]
            close $f
            if {![catch {exec sh testsse2.sh}]} {
                set compiler(simd) -msse2
                puts "yes."
            } else {
                puts "no."
            }
        }
        puts -nonewline "    Checking if your system supports __sync_* builtin functions: "
        flush stdout
        if {![catch {open testSyncBuiltin.sh w} f]} {
            puts $f [regsub -all __CC__ $TestSyncBuiltin $environment($cc)]
            close $f
            if {![catch {exec sh testSyncBuiltin.sh}]} {
                puts "yes."
            } else {
                set compiler(thread-support) -DDONT_USE_SYNC_BUILTIN
                puts "no."
            }
        }
        catch { file delete -force testsse2.sh }
        catch { file delete -force testsse2.c }
        catch { file delete -force testsse2 }
    }
    return $version
}


# writeMakefile:
#    Creates the Makefile.in using Makefile.conf and the configured settings.
#    Also creates tcl/config.tcl
#
proc writeMakefile {{type ""}} {
    global option defaults environment package compiler feature configure subdir

    set option(EXTRA_CFLAGS) "-pipe"

    set success [findTclTkPaths]

    foreach name [array names defaults] {
        if {![info exists option($name)]} {
            set option([string toupper $name]) $defaults($name)
        }
    }

    foreach arr {environment package compiler} {
        foreach name [array names $arr] {
            set option([string toupper $name]) [set ${arr}($name)]
        }
    }

    foreach name [array names subdir] {
        if {[string length $subdir($name)]} {
            Append option(SUBDIRS) $subdir($name)
        }
    }

    if { $feature(symbols)}         { Append option(C_DEBUG) "-g" }
    if { $feature(symbols)}         { Append option(CXX_DEBUG) "-g" }
    if {!$feature(assertions)}      { Append option(C_DEBUG) "-DNDEBUG" }
    if {!$feature(assertions)}      { Append option(CXX_DEBUG) "-DNREQ -DNASSERT" }
    if { $feature(gprof-profiling)} { Append option(PROFILING) "-pg" }
    if { $feature(gcov-coverage)}   { Append option(PROFILING) "-coverage" }
    if { $feature(debug-si4)}       { Append option(EXTRA_DEBUG_FLAGS) "-DDEBUG_SI4" }
#   if {$feature(splash-screen)}    { set option(SPLASH) "yes" }
#   if {!$feature(splash-screen)}   { set option(SPLASH) "no" }

    set option(TCL_VERSION) $configure(tcl-version)
    set option(PROGRAM) tkscidb$configure(program-suffix)
    set option(SCRIPT) scidb$configure(program-suffix)

    foreach d {bin lib} {
        if {[info exists configure(${d}dir)]} {
            set dir $configure(${d}dir)
        } else {
            set dir $configure(exec-prefix)/$d
        }
        set option([string toupper $d]DIR) $dir
    }

    if {[info exists configure(mandir)]} {
        set dir $configure(mandir)
    } else {
        set dir $configure(prefix)/man
    }
    set option(MANDIR) $dir

    if {[info exists configure(datadir)]} {
        set dir $configure(datadir)
    } else {
        set dir $configure(prefix)/share
    }
    set option(DATADIR) $dir/$option(SCRIPT)

    # XXX not working for MacOS
    if {[string match {/usr/local*} $configure(prefix)] && [file isdirectory /usr/local/share/fonts]} {
        set prefix /usr/local
    } else {
        set prefix /usr
    }
    if {![file isdirectory $prefix/share/fonts]} {
        set option(FONTDIR) "~/.fonts"
    } else {
        set option(FONTDIR) $prefix/share/fonts/truetype/Scidb
    }

    foreach name [array names option] {
        set s [string map {- _} $name]
        if {$s ne $name} {
            set option($s) $option($name)
            unset option($name)
        }
    }

    if {[catch {set from [open "Makefile.conf" r]}]} {
       puts "Error opening file for reading: Makefile.conf"
       exit 1
    }

    if {[catch {set to [open "Makefile.in" w]}]} {
       puts "Error opening file for writing: Makefile.in"
       exit 1
    }

    while {[gets $from line] >= 0} {
        if {[string index $line 0] ne "!"} {
            set first [string first "@" $line]
            while {$first >= 0} {
                set last [string first "@" $line [expr {$first + 1}]]
                if {$last >= 0} {
                    set sub  [string range $line [expr {$first + 1}] [expr {$last - 1}]]
                    set pre  [string range $line 0 [expr $first - 1]]
                    set post [string range $line [expr $last + 1] end]
                    set line $pre

                    if {[info exists option($sub)]} {
                        append line $option($sub)
                    }
                    append line $post
                }
                set first [string first "@" $line]
            }
            puts $to $line
        }
    }

    close $from
    close $to

    # Summary info
    if {$success} {
        puts "Makefile.in configured for your system was written."
        puts "Now just type \"make\" to compile Scidb."
    } else {
        puts "Not all settings could be determined!"
        puts "The default Makefile.in was written."
        puts "You will need to edit it before you can compile Scidb."
    }
}


# usage:
#     Explains the usage of this script, then exits
#
proc usage {rc} {
    global configure
    global feature
    global environment
    global env

    puts "Usage: ./configure \[OPTION\]... \[VAR=VALUE\]..."
    puts ""
    puts "To assign environment variables (e.g., CC, CFLAGS...), specify them as"
    puts "VAR=VALUE.  See below for descriptions of some of the useful variables."
    puts ""
    puts "Defaults for the options are specified in brackets."
    puts ""
    puts "Configuration:"
    puts "  -h, --help               display this help and exit"
    puts "  -n, --no-create          do not create output files"
    puts ""
    puts "Installation directories:"
    puts "  --prefix=PREFIX          install architecture-independent files in PREFIX"
    puts "                           \[$configure(prefix)\]"
    puts "  --exec-prefix=EPREFIX    install architecture-dependent files in EPREFIX"
    puts "                           \[$configure(exec-prefix)\]"
    puts ""
    puts "By default, \`make install' will install all the files in"
    puts "\`$configure(prefix)/bin', \`$configure(prefix)/lib' etc.  You can specify"
    puts "an installation prefix other than \`/usr/local' using \`--prefix',"
    puts "for instance \`--prefix=$env(HOME)'."
    puts ""
    puts "For better control, use the options below."
    puts ""
    puts "Fine tuning of the installation directories:"
    puts "  --bindir=DIR             user executables \[EPREFIX/bin\]"
    puts "  --datadir=DIR            read-only architecture-independent data \[PREFIX/share\]"
    puts "  --libdir=DIR             object code libraries \[EPREFIX/lib\]"
    puts "  --mandir=DIR             man documentation \[PREFIX/man\]"
    puts ""
    puts "Program names:"
    puts "  --program-suffix=SUFFIX  append SUFFIX to installed program names"
    puts ""
    puts "Tcl/Tk features:"
    puts "  --tcl-version=VER        Tcl/Tk version \[$configure(tcl-version)\]"
    puts "  --tcl-includes=DIR       Tcl include files are in DIR"
    puts "  --tcl-libraries=DIR      Tcl library files are in DIR"
    puts "  --tk-includes=DIR        Tk include files are in DIR"
    puts "  --tk-libraries=DIR       Tk library files are in DIR"
    puts ""
    puts "X features:"
    puts "  --x-includes=DIR         X include files are in DIR"
    puts "  --x-libraries=DIR        X library files are in DIR"
    puts "  --xcursor-libraries=DIR  Xcursor library files are in DIR"
    puts ""
    puts "Packages:"
    puts "  --with-zlib-inc=DIR      path to Zlib compression library headers"
    puts "  --with-zlib-lib=DIR      link options for Zlib compression library"
    puts "  --with-zziplib-inc=DIR   path to Zziplib zip library headers"
    puts "  --with-zziplib-lib=DIR   link options for Zziplib zip library"
    puts "  --with-expat-inc=DIR     path to Expat XML Parser headers"
    puts "  --with-expat-lib=DIR     link options for Expat XML Parser library"
    puts ""
    puts "Optional Features:"
    puts "  --disable-FEATURE        do not include FEATURE (same as --enable-FEATURE=no)"
    puts "  --enable-FEATURE\[=ARG\]   include FEATURE \[ARG=yes\]"
    puts "  --enable-symbols         build with debugging symbols \[default=$feature(symbols)\]"
    puts "  --enable-assertions      build with assertions (slows down the program)"
    puts "                           \[default=$feature(assertions)\]"
    puts "  --enable-gprof-profiling enable gprof profiling (slows down the program)"
    puts "                           \[default=$feature(gprof-profiling)\]"
    puts "  --enable-gcov-coverage   enable coverage (slows down the program)"
    puts "                           \[default=$feature(gcov-coverage)\]"
    puts "  --enable-si4-debugging   enable debugging information for .si3/.si4 format"
#   puts "  --enable-splash-screen   enable (or disable) the splash screen \[default=$feature(splash-screen)\]"
    puts ""
    puts "Some influential environment variables:"
    puts "  CC          C compiler command \[$environment(CC)\]"
    puts "  CFLAGS      C compiler flags \[$environment(CFLAGS)\]"
    puts "  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a"
    puts "              nonstandard directory <lib dir>"
    puts "  CXX         C++ compiler command \[$environment(CXX)\]"
    puts "  CXXFLAGS    C++ compiler flags \[$environment(CXXFLAGS)\]"
    puts "  OPTIMIZE    C/C++ optimization flags \[$environment(OPTIMIZE)\]"
    puts "  AR          AR for the host \[$environment(AR)\]"
    puts "  ARFLAGS     Flags for AR \[$environment(ARFLAGS)\]"
    puts "  RANLIB      RANLIB for the host \[$environment(RANLIB)\]"
    puts "  STRIP       STRIP for the host \[$environment(STRIP)\]"
    puts ""
    puts "Use these variables to override the choices made by \`configure' or to help"
    puts "it to find libraries and programs with nonstandard names/locations."
    exit $rc
}

##############################################################################

# XXX for BETA version
set environment(OPTIMIZE) ""
set feature(symbols) yes
set feature(assertions) yes
set feature(debug-si4) yes
set configure(program-suffix) "-beta"

if {[lsearch $argv -h] >= 0 || [lsearch $argv --help] >= 0} { usage 0 }

puts "configure: Makefile configuration program for Scidb"

# Parse command-line arguments:
foreach arg $argv {
    lassign [split $arg =] arg0 arg1
    if {[string match --enable-* $arg0]} {
        if {![info exists arg1]} { set arg1 yes }
        set feature([string range $arg0 9 end]) $arg1
    } elseif {[string match --disable-* $arg0]} {
        if {![info exists arg1]} { set arg1 no }
        set feature([string range $arg0 10 end]) $arg1
    } else {
        if {![info exists arg1]} {
            puts "Invalid argument: $arg"
            usage 1
        }
        if {[string match --with-* $arg0]} {
            set package([string range $arg0 7 end]) $arg1
        } elseif {[info exists environment($arg0)]} {
            set environment($arg0) $arg1
        } else {
            set configure($args0) $args1
        }
    }
    unset -nocomplain arg1
}
set configure(tk-version) $configure(tcl-version)


if {[file readable "Makefile.in"]} {
    puts "Renaming \"Makefile.in\" to \"Makefile.in.bak\""
    catch { file rename -force "Makefile.in" "Makefile.in.bak" }
}

set tclv $configure(tcl-version)
set tclv_nodot [expr round($tclv*10)]

puts "    Tcl/Tk version: $tclv"
puts "    Your operating system is: $tcl_platform(os) $tcl_platform(osVersion)"

set gxxVer ""
set gccVer [checkGCC CC]
if {[string length $gccVer]} { set gxxVer [checkGCC CXX] }

if {[string length $gxxVer]} {
    if {$gccVer eq $gxxVer} {
        checkZlib
        checkZziplib
        checkExpat
        if {[lsearch $argv -n] == -1 && [lsearch $argv --no-create] == -1} {
            writeMakefile
        }
        exit 0
    } else {
        puts "Compiler version mismatch. Please configure CC and GXX with same versions."
    }

}

exit 1

# vi:set ts=4 sw=4 et:
