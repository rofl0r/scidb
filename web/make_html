#!/bin/sh
#
# Usage: make_html pattern.txt filename.txt > filename.html
# \
exec tclsh "$0" "$@"

# read .txt file ###########################

set filename [lindex $argv 1]
set fd [open $filename]
set section ""
set lang [expr {[string match */de [pwd]] ? "de" : "en"}]
chan configure $fd -encoding iso8859-1

set Mapping {
  <link/> {<span class="link">&nbsp;&#xf08e;</span>}
  <nobr>  {<span style='white-space:nowrap;'>}
  </nobr> {</span>}
}

array set content {
  CONTENT     ""
  FOOTER      ""
  ONLOAD      ""
  SIDEBAR     ""
  STYLES      ""
  TITLE       ""
  TRANSLATE   "Translate"
  TRANSLATOR  ""
  VISITOR     ""
  LOCATIONS_OF_VISITORS ""

  SCRIPTS     {<script type="text/javascript" src="js/cookies.js"></script>
  }
  AUTODISPLAY false
}

set content(FILENAME)   [lindex [split $filename "."] 0]
set content(ENGLISH)    "%%../$content(FILENAME).html"
set content(GERMAN)     "%%$content(FILENAME).html"
set content(JSREQUIRED) "Javascript required"

while {[gets $fd line] >= 0} {
  if {[string index $line 0] ne "#"} {
    switch -- $line {
      CONTENT - FOOTER - ONLOAD - SCRIPTS - SIDEBAR - STYLES - TITLE { set section $line }

      default {
        if {[string length [string trim $line]] > 0} {
          if {[regexp {^(\s*)<image data="(.*)"} $line _ spaces data]} {
            lassign [split $data :] img title(en) title(de)
            set thumbnail "screenshots/thumbs/$img"
            set image "screenshots/$img"
            regexp {\(([0-9]+)x([0-9]+),} [exec pngcheck ../$thumbnail] _ thumbwidth thumbheight
            regexp {\(([0-9]+)x([0-9]+),} [exec pngcheck ../$image] _ width height
            if {$lang != "en"} {
              set thumbnail "../$thumbnail"
              set image "../$image"
            }
            set line ""
            append line "$spaces<a class='fancybox'\n"
            append line "$spaces   href='$image'\n"
            append line "$spaces   data-fancybox-group='gallery'\n"
            append line "$spaces   title='$title($lang)'>\n"
            append line "$spaces  <img src='$thumbnail'\n"
            append line "$spaces       alt='$title($lang)'\n"
            append line "$spaces       title='$title($lang)'\n"
            append line "$spaces       class='bordersOff'\n"
            append line "$spaces       width='$thumbwidth'\n"
            append line "$spaces       height='$thumbheight'\n"
            append line "$spaces       name='${width}x${height}' />\n"
            append line "$spaces</a>\n"
            append content($section) $line
          } else {
            append content($section) [string map $Mapping $line] "\n"
          }
        }
      }
    }
  }
}

if {$filename ne "screenshots.txt"} {
  set content(TRANSLATOR) {
    <div id="translator" class="block">
      <ul class="header">
        <li class="header">{TRANSLATE}</li>
      </ul>
      <ul class="body">
        <li class="tiny-notes">
          <noscript>({JSREQUIRED})</noscript>
          <div id="google_translate_element" lang="{LANG}"></div>
          <script type="text/javascript">
            function googleTranslateElementInit()
            {
              new google.translate.TranslateElement(
                {
                  pageLanguage: '{LANG}',
                  autoDisplay: {AUTODISPLAY},
                  multilanguagePage: true,
                  layout: google.translate.TranslateElement.InlineLayout.SIMPLE
                },
                'google_translate_element');
            }
          </script>
          <script src="http://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit" type="text/javascript">
        </script>
        </li>
      </ul>
    </div>
  }
}

close $fd

if {$lang == "de"} {
# G E R M A N ##############################

  set content(LANG)                 "de"
  set content(LOCALE)               "de-DE"
  set content(TRANSLATE)            "Übersetzen"
  set content(JSREQUIRED)           "Javascript erforderlich"
  set content(DESCRIPTION)          "Schachdatenbank-Applikation"
  set content(LIKE)                 "Ich mag dies"
  set content(SHARE)                "Teilen"

  set content(REVIEW)               "Ein Review abgeben"
  set content(GUESTBOOK)            "Ins Gästebuch eintragen"
  set content(FEATUREREQUEST)       "Einen Funktionswunsch eintragen"
  set content(SUBSCRIBE)            "Diese Seite subskribieren"

  set content(SOURCEFORGE)          "Scidb auf SourceForge.net"
  set content(VISITOR)              "Besucher"
  set content(LOCATION_OF_VISITORS) "Standorte der Besucher dieser Seite"

  set content(GUIDE_DOWNLOAD)       "Download"
  set content(GUIDE_SCREENSHOTS)    "Screenshots"
  set content(GUIDE_VOTE_THEMES)    "Themen einstufen"
  set content(GUIDE_HELPPAGES)      "Hilfeseiten"
  set content(GUIDE_MOREINFO)       "Weitere Informationen"
  set content(GUIDE_LINKS)          "Scidb-Links"
  set content(GUIDE_WANTED)         "Gesucht"
  set content(GUIDE_PROJECT)        "Das Scidb-Projekt"
  set content(GUIDE_RELEASEHISTORY) "Freigabehistorie"
  set content(GUIDE_ROADMAP)        "Roadmap"

  set content(STAR_CAPTION_1)       "Niemals"
  set content(STAR_CAPTION_2)       "Mag ich nicht"
  set content(STAR_CAPTION_3)       "Unentscheidbar"
  set content(STAR_CAPTION_4)       "Mag ich"
  set content(STAR_CAPTION_5)       "Favorit"

############################################
} else {
# E N G L I S H ############################

  set content(LANG)                 "en"
  set content(LOCALE)               "en-US"
  set content(DESCRIPTION)          "Chess database application"
  set content(LIKE)                 "I like this"
  set content(SHARE)                "Share"

  set content(REVIEW)               "Review"
  set content(GUESTBOOK)            "Sign Guestbook"
  set content(FEATUREREQUEST)       "Feature Request"
  set content(SUBSCRIBE)            "Subscribe to this page"

  set content(SOURCEFORGE)          "Scidb at SourceForge.net"
  set content(VISITOR)              "Visitor"
  set content(LOCATION_OF_VISITORS) "Locations of visitors to this page"

  set content(GUIDE_DOWNLOAD)       "Download"
  set content(GUIDE_SCREENSHOTS)    "Screenshots"
  set content(GUIDE_VOTE_THEMES)    "Vote Themes"
  set content(GUIDE_HELPPAGES)      "Help Pages"
  set content(GUIDE_MOREINFO)       "More Info"
  set content(GUIDE_LINKS)          "Scidb Links"
  set content(GUIDE_WANTED)         "Wanted"
  set content(GUIDE_PROJECT)        "The Scidb Project"
  set content(GUIDE_RELEASEHISTORY) "Release History"
  set content(GUIDE_ROADMAP)        "Roadmap"

  set content(STAR_CAPTION_1)       "Never"
  set content(STAR_CAPTION_2)       "Don\\'t like"
  set content(STAR_CAPTION_3)       "Undecidedly"
  set content(STAR_CAPTION_4)       "I like"
  set content(STAR_CAPTION_5)       "Favorite"

  set content(AUTODISPLAY)          "true"

  set content(ENGLISH)              "%%$content(FILENAME).html"
  set content(GERMAN)               "%%de/$content(FILENAME).html"

############################################
}

set content(TITLE) [string trim $content(TITLE)]
set content(HEADER) $content(TITLE)

if {![string match Scidb* $content(TITLE)]} {
  set content(TITLE) "Scidb - $content(TITLE)"
}

set content(ONLOAD) [string trim $content(ONLOAD)]
set content(ONLOAD) "onload=\"setCookie('lang', '$content(LANG)', 720);$content(ONLOAD)\""

# write .html file #########################

set fd [open "[lindex $argv 0]"]
chan configure $fd -encoding iso8859-1
chan configure stdout -encoding iso8859-1
set cond "@iffile $content(FILENAME)"
set skip 0

set f [lindex $argv 0]
while {[gets $fd line] >= 0} {
  if {[string match @iffile* $line]} {
    set skip [expr {$line != $cond}]
  } elseif {$line == "@else"} {
    set skip [expr {!$skip}]
  } elseif {$line == "@endif"} {
    set skip 0
  } elseif {!$skip} {
    set indices [regexp -indices -inline -- {\{[A-Z0-9_]+\}} $line]

    while {[llength $indices]} {
      set i [lindex [lindex $indices 0] 0]
      set k [lindex [lindex $indices 0] 1]
      set section [string range $line [expr {$i + 1}] [expr {$k - 1}]]
      set line [string replace $line $i $k $content($section)]
      set indices [regexp -indices -inline -- {\{[A-Z0-9_]+\}} $line]
    }

    if {$lang != "en"} {
      foreach {rexp len} {  {src=\"[a-z]+/} 5
                            {href=\"[a-z]+/} 6
                            {url: '[a-z]+/} 6
                            {import \"[a-z]+/} 8} {
        set indices [regexp -indices -inline -- $rexp $line]

        while {[llength $indices]} {
          set i [expr {[lindex [lindex $indices 0] 0] + $len}]
          set str [string range $line 0 [expr {$i - 1}]]
          append str "../"
          append str  [string range $line $i end]
          set line $str
          set indices [regexp -indices -inline -- $rexp $line]
        }
      }
    }

    puts [string map {%% {}} $line]
  }
}

close $fd

# vi:set ts=2 sw=2 et:
